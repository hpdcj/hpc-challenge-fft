%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/auxil/HPL_dlatcpy.c
Compiled : 2016-03-19  13:19:24
Compiler : Version 8.4.5
Ftnlx    : Version 8413 (libcif 84006)
Target   : x86-64
Command  : driver.cc -h cpu=haswell -h static -D __CRAYXC -D __CRAY_HASWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -h network=aries
           -o ../../../src/auxil/HPL_dlatcpy.o
           -c ../../../src/auxil/HPL_dlatcpy.c -I ../../../include
           -I ../../../include/CrayX1 -D Add_ -D StringSunStyle
           -D F77_INTEGER=int -O 2 -h list=m -D LONG_IS_64BITS -h restrict=a
           -W l,--rpath=/opt/cray/cce/8.4.5/craylibs/x86-64
           -ibase-compiler /opt/cray/cce/8.4.5/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.4.5/craylibs/x86-64/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include-fixed
           -isystem /usr/include
           -I /opt/cray/mpt/7.3.2/gni/mpich-cray/8.3/include
           -I /opt/cray/libsci/16.03.1/CRAY/8.3/x86_64/include
           -I /opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I /opt/cray/pmi/5.0.10-1.0000.11050.0.0.ari/include
           -I /opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I /opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I /opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I /opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I /opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/../include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/..//include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I /opt/cray-hss-devel/7.2.0/include

clx report
------------
Source   : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/auxil/HPL_dlatcpy.c
Date     : 03/19/2016  13:19:25


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.               /* 
    2.                * -- High Performance Computing Linpack Benchmark (HPL)                
    3.                *    HPL - 2.0 - September 10, 2008                          
    4.                *    Antoine P. Petitet                                                
    5.                *    University of Tennessee, Knoxville                                
    6.                *    Innovative Computing Laboratory                                 
    7.                *    (C) Copyright 2000-2008 All Rights Reserved                       
    8.                *                                                                      
    9.                * -- Copyright notice and Licensing terms:                             
   10.                *                                                                      
   11.                * Redistribution  and  use in  source and binary forms, with or without
   12.                * modification, are  permitted provided  that the following  conditions
   13.                * are met:                                                             
   14.                *                                                                      
   15.                * 1. Redistributions  of  source  code  must retain the above copyright
   16.                * notice, this list of conditions and the following disclaimer.        
   17.                *                                                                      
   18.                * 2. Redistributions in binary form must reproduce  the above copyright
   19.                * notice, this list of conditions,  and the following disclaimer in the
   20.                * documentation and/or other materials provided with the distribution. 
   21.                *                                                                      
   22.                * 3. All  advertising  materials  mentioning  features  or  use of this
   23.                * software must display the following acknowledgement:                 
   24.                * This  product  includes  software  developed  at  the  University  of
   25.                * Tennessee, Knoxville, Innovative Computing Laboratory.             
   26.                *                                                                      
   27.                * 4. The name of the  University,  the name of the  Laboratory,  or the
   28.                * names  of  its  contributors  may  not  be used to endorse or promote
   29.                * products  derived   from   this  software  without  specific  written
   30.                * permission.                                                          
   31.                *                                                                      
   32.                * -- Disclaimer:                                                       
   33.                *                                                                      
   34.                * THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   35.                * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
   36.                * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   37.                * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
   38.                * OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
   39.                * SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
   40.                * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   41.                * DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
   42.                * THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
   43.                * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   44.                * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
   45.                * ---------------------------------------------------------------------
   46.                */ 
   47.               /*
   48.                * Include files
   49.                */
   50.               #include "hpl.h"
   51.               /*
   52.                * Define default value for unrolling factors
   53.                * #ifndef HPL_LATCPY_M_DEPTH
   54.                * #define    HPL_LATCPY_M_DEPTH      32
   55.                * #define    HPL_LATCPY_LOG2_M_DEPTH  5
   56.                * #endif
   57.                * #ifndef HPL_LATCPY_N_DEPTH
   58.                * #define    HPL_LATCPY_N_DEPTH       4
   59.                * #define    HPL_LATCPY_LOG2_N_DEPTH  2
   60.                * #endif
   61.                */
   62.               #ifndef HPL_LATCPY_M_DEPTH
   63.               #define    HPL_LATCPY_M_DEPTH       4
   64.               #define    HPL_LATCPY_LOG2_M_DEPTH  2
   65.               #endif
   66.               #ifndef HPL_LATCPY_N_DEPTH
   67.               #define    HPL_LATCPY_N_DEPTH       2
   68.               #define    HPL_LATCPY_LOG2_N_DEPTH  1
   69.               #endif
   70.               
   71.               #ifdef HPL_STDC_HEADERS
   72.               void HPL_dlatcpy
   73.               (
   74.                  const int                        M,
   75.                  const int                        N,
   76.                  const double *                   A,
   77.                  const int                        LDA,
   78.                  double *                         B,
   79.                  const int                        LDB
   80.               )
   81.               #else
   82.               void HPL_dlatcpy
   83.               ( M, N, A, LDA, B, LDB )
   84.                  const int                        M;
   85.                  const int                        N;
   86.                  const double *                   A;
   87.                  const int                        LDA;
   88.                  double *                         B;
   89.                  const int                        LDB;
   90.               #endif
   91.               {
   92.               /* 
   93.                * Purpose
   94.                * =======
   95.                *
   96.                * HPL_dlatcpy copies the transpose of an array A into an array B.
   97.                * 
   98.                *
   99.                * Arguments
  100.                * =========
  101.                *
  102.                * M       (local input)                 const int
  103.                *         On entry,  M specifies the number of  rows of the array B and
  104.                *         the number of columns of A. M must be at least zero.
  105.                *
  106.                * N       (local input)                 const int
  107.                *         On entry,  N specifies the number of  rows of the array A and
  108.                *         the number of columns of B. N must be at least zero.
  109.                *
  110.                * A       (local input)                 const double *
  111.                *         On entry, A points to an array of dimension (LDA,M).
  112.                *
  113.                * LDA     (local input)                 const int
  114.                *         On entry, LDA specifies the leading dimension of the array A.
  115.                *         LDA must be at least MAX(1,N).
  116.                *
  117.                * B       (local output)                double *
  118.                *         On entry, B points to an array of dimension (LDB,N). On exit,
  119.                *         B is overwritten with the transpose of A.
  120.                *
  121.                * LDB     (local input)                 const int
  122.                *         On entry, LDB specifies the leading dimension of the array B.
  123.                *         LDB must be at least MAX(1,M).
  124.                *
  125.                * ---------------------------------------------------------------------
  126.                */ 
  127.               /*
  128.                * .. Local Variables ..
  129.                */
  130.               #ifdef HPL_LATCPY_USE_COPY
  131.                  register int               j;
  132.               #else
  133.               #if   ( HPL_LATCPY_N_DEPTH == 1 )
  134.                  const double               * A0 = A;
  135.                  double                     * B0 = B;
  136.               #elif ( HPL_LATCPY_N_DEPTH == 2 )
  137.                  const double               * A0 = A,              * A1 = A + 1;
  138.                  double                     * B0 = B,              * B1 = B +     LDB;
  139.               #elif ( HPL_LATCPY_N_DEPTH == 4 )
  140.                  const double               * A0 = A,              * A1 = A + 1,
  141.                                             * A2 = A + 2,          * A3 = A + 3;
  142.                  double                     * B0 = B,              * B1 = B +     LDB,
  143.                                             * B2 = B + (LDB << 1), * B3 = B + 3 * LDB;
  144.               #endif
  145.                  const int                  incA = -M * LDA + (1 << HPL_LATCPY_LOG2_N_DEPTH),
  146.                                             incB = ( (unsigned int)(LDB) <<
  147.                                                      HPL_LATCPY_LOG2_N_DEPTH ) - M,
  148.                                             incA0 = -M * LDA + 1, incB0 = LDB - M;
  149.                  int                        mu, nu;
  150.                  register int               i, j;
  151.               #endif
  152.               /* ..
  153.                * .. Executable Statements ..
  154.                */
  155.                  if( ( M <= 0 ) || ( N <= 0 ) ) return;
  156.               
  157.               #ifdef HPL_LATCPY_USE_COPY
  158.                  for( j = 0; j < N; j++, B0 += LDB ) HPL_dcopy( M, A0+j, LDA, B0, 1 );
  159.               #else
  160.                  mu = (int)( ( (unsigned int)(M) >> HPL_LATCPY_LOG2_M_DEPTH ) <<
  161.                                                     HPL_LATCPY_LOG2_M_DEPTH );
  162.                  nu = (int)( ( (unsigned int)(N) >> HPL_LATCPY_LOG2_N_DEPTH ) <<
  163.                                                     HPL_LATCPY_LOG2_N_DEPTH );
  164.               
  165.  + 1--------<    for( j = 0; j < nu; j += HPL_LATCPY_N_DEPTH )
  166.    1             {
  167.  + 1 2------<       for( i = 0; i < mu; i += HPL_LATCPY_M_DEPTH )
  168.    1 2              {
  169.    1 2        #if   ( HPL_LATCPY_N_DEPTH == 1 )
  170.    1 2                 B0[ 0] = *A0; A0 += LDA;
  171.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 2 )
  172.    1 2                 B0[ 0] = *A0; A0 += LDA; B1[ 0] = *A1; A1 += LDA;
  173.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 4 )
  174.    1 2                 B0[ 0] = *A0; A0 += LDA; B1[ 0] = *A1; A1 += LDA;
  175.    1 2                 B2[ 0] = *A2; A2 += LDA; B3[ 0] = *A3; A3 += LDA;
  176.    1 2        #endif
  177.    1 2        
  178.    1 2        #if ( HPL_LATCPY_M_DEPTH >  1 )
  179.    1 2        
  180.    1 2        #if   ( HPL_LATCPY_N_DEPTH == 1 )
  181.    1 2                 B0[ 1] = *A0; A0 += LDA;
  182.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 2 )
  183.    1 2                 B0[ 1] = *A0; A0 += LDA; B1[ 1] = *A1; A1 += LDA;
  184.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 4 )
  185.    1 2                 B0[ 1] = *A0; A0 += LDA; B1[ 1] = *A1; A1 += LDA;
  186.    1 2                 B2[ 1] = *A2; A2 += LDA; B3[ 1] = *A3; A3 += LDA;
  187.    1 2        #endif
  188.    1 2        
  189.    1 2        #endif
  190.    1 2        #if ( HPL_LATCPY_M_DEPTH >  2 )
  191.    1 2        
  192.    1 2        #if   ( HPL_LATCPY_N_DEPTH == 1 )
  193.    1 2                 B0[ 2] = *A0; A0 += LDA; B0[ 3] = *A0; A0 += LDA;
  194.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 2 )
  195.    1 2                 B0[ 2] = *A0; A0 += LDA; B1[ 2] = *A1; A1 += LDA;
  196.    1 2                 B0[ 3] = *A0; A0 += LDA; B1[ 3] = *A1; A1 += LDA;
  197.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 4 )
  198.    1 2                 B0[ 2] = *A0; A0 += LDA; B1[ 2] = *A1; A1 += LDA;
  199.    1 2                 B2[ 2] = *A2; A2 += LDA; B3[ 2] = *A3; A3 += LDA;
  200.    1 2                 B0[ 3] = *A0; A0 += LDA; B1[ 3] = *A1; A1 += LDA;
  201.    1 2                 B2[ 3] = *A2; A2 += LDA; B3[ 3] = *A3; A3 += LDA;
  202.    1 2        #endif
  203.    1 2        
  204.    1 2        #endif
  205.    1 2        #if ( HPL_LATCPY_M_DEPTH >  4 )
  206.    1 2        
  207.    1 2        #if   ( HPL_LATCPY_N_DEPTH == 1 )
  208.    1 2                 B0[ 4] = *A0; A0 += LDA; B0[ 5] = *A0; A0 += LDA;
  209.    1 2                 B0[ 6] = *A0; A0 += LDA; B0[ 7] = *A0; A0 += LDA;
  210.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 2 )
  211.    1 2                 B0[ 4] = *A0; A0 += LDA; B1[ 4] = *A1; A1 += LDA;
  212.    1 2                 B0[ 5] = *A0; A0 += LDA; B1[ 5] = *A1; A1 += LDA;
  213.    1 2                 B0[ 6] = *A0; A0 += LDA; B1[ 6] = *A1; A1 += LDA;
  214.    1 2                 B0[ 7] = *A0; A0 += LDA; B1[ 7] = *A1; A1 += LDA;
  215.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 4 )
  216.    1 2                 B0[ 4] = *A0; A0 += LDA; B1[ 4] = *A1; A1 += LDA;
  217.    1 2                 B2[ 4] = *A2; A2 += LDA; B3[ 4] = *A3; A3 += LDA;
  218.    1 2                 B0[ 5] = *A0; A0 += LDA; B1[ 5] = *A1; A1 += LDA;
  219.    1 2                 B2[ 5] = *A2; A2 += LDA; B3[ 5] = *A3; A3 += LDA;
  220.    1 2                 B0[ 6] = *A0; A0 += LDA; B1[ 6] = *A1; A1 += LDA;
  221.    1 2                 B2[ 6] = *A2; A2 += LDA; B3[ 6] = *A3; A3 += LDA;
  222.    1 2                 B0[ 7] = *A0; A0 += LDA; B1[ 7] = *A1; A1 += LDA;
  223.    1 2                 B2[ 7] = *A2; A2 += LDA; B3[ 7] = *A3; A3 += LDA;
  224.    1 2        #endif
  225.    1 2        
  226.    1 2        #endif
  227.    1 2        #if ( HPL_LATCPY_M_DEPTH >  8 )
  228.    1 2        
  229.    1 2        #if   ( HPL_LATCPY_N_DEPTH == 1 )
  230.    1 2                 B0[ 8] = *A0; A0 += LDA; B0[ 9] = *A0; A0 += LDA;
  231.    1 2                 B0[10] = *A0; A0 += LDA; B0[11] = *A0; A0 += LDA;
  232.    1 2                 B0[12] = *A0; A0 += LDA; B0[13] = *A0; A0 += LDA;
  233.    1 2                 B0[14] = *A0; A0 += LDA; B0[15] = *A0; A0 += LDA;
  234.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 2 )
  235.    1 2                 B0[ 8] = *A0; A0 += LDA; B1[ 8] = *A1; A1 += LDA;
  236.    1 2                 B0[ 9] = *A0; A0 += LDA; B1[ 9] = *A1; A1 += LDA;
  237.    1 2                 B0[10] = *A0; A0 += LDA; B1[10] = *A1; A1 += LDA;
  238.    1 2                 B0[11] = *A0; A0 += LDA; B1[11] = *A1; A1 += LDA;
  239.    1 2                 B0[12] = *A0; A0 += LDA; B1[12] = *A1; A1 += LDA;
  240.    1 2                 B0[13] = *A0; A0 += LDA; B1[13] = *A1; A1 += LDA;
  241.    1 2                 B0[14] = *A0; A0 += LDA; B1[14] = *A1; A1 += LDA;
  242.    1 2                 B0[15] = *A0; A0 += LDA; B1[15] = *A1; A1 += LDA;
  243.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 4 )
  244.    1 2                 B0[ 8] = *A0; A0 += LDA; B1[ 8] = *A1; A1 += LDA;
  245.    1 2                 B2[ 8] = *A2; A2 += LDA; B3[ 8] = *A3; A3 += LDA;
  246.    1 2                 B0[ 9] = *A0; A0 += LDA; B1[ 9] = *A1; A1 += LDA;
  247.    1 2                 B2[ 9] = *A2; A2 += LDA; B3[ 9] = *A3; A3 += LDA;
  248.    1 2                 B0[10] = *A0; A0 += LDA; B1[10] = *A1; A1 += LDA;
  249.    1 2                 B2[10] = *A2; A2 += LDA; B3[10] = *A3; A3 += LDA;
  250.    1 2                 B0[11] = *A0; A0 += LDA; B1[11] = *A1; A1 += LDA;
  251.    1 2                 B2[11] = *A2; A2 += LDA; B3[11] = *A3; A3 += LDA;
  252.    1 2                 B0[12] = *A0; A0 += LDA; B1[12] = *A1; A1 += LDA;
  253.    1 2                 B2[12] = *A2; A2 += LDA; B3[12] = *A3; A3 += LDA;
  254.    1 2                 B0[13] = *A0; A0 += LDA; B1[13] = *A1; A1 += LDA;
  255.    1 2                 B2[13] = *A2; A2 += LDA; B3[13] = *A3; A3 += LDA;
  256.    1 2                 B0[14] = *A0; A0 += LDA; B1[14] = *A1; A1 += LDA;
  257.    1 2                 B2[14] = *A2; A2 += LDA; B3[14] = *A3; A3 += LDA;
  258.    1 2                 B0[15] = *A0; A0 += LDA; B1[15] = *A1; A1 += LDA;
  259.    1 2                 B2[15] = *A2; A2 += LDA; B3[15] = *A3; A3 += LDA;
  260.    1 2        #endif
  261.    1 2        
  262.    1 2        #endif
  263.    1 2        #if ( HPL_LATCPY_M_DEPTH > 16 )
  264.    1 2        
  265.    1 2        #if   ( HPL_LATCPY_N_DEPTH == 1 )
  266.    1 2                 B0[16] = *A0; A0 += LDA; B0[17] = *A0; A0 += LDA;
  267.    1 2                 B0[18] = *A0; A0 += LDA; B0[19] = *A0; A0 += LDA;
  268.    1 2                 B0[20] = *A0; A0 += LDA; B0[21] = *A0; A0 += LDA;
  269.    1 2                 B0[22] = *A0; A0 += LDA; B0[23] = *A0; A0 += LDA;
  270.    1 2                 B0[24] = *A0; A0 += LDA; B0[25] = *A0; A0 += LDA;
  271.    1 2                 B0[26] = *A0; A0 += LDA; B0[27] = *A0; A0 += LDA;
  272.    1 2                 B0[28] = *A0; A0 += LDA; B0[29] = *A0; A0 += LDA;
  273.    1 2                 B0[30] = *A0; A0 += LDA; B0[31] = *A0; A0 += LDA;
  274.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 2 )
  275.    1 2                 B0[16] = *A0; A0 += LDA; B1[16] = *A1; A1 += LDA;
  276.    1 2                 B0[17] = *A0; A0 += LDA; B1[17] = *A1; A1 += LDA;
  277.    1 2                 B0[18] = *A0; A0 += LDA; B1[18] = *A1; A1 += LDA;
  278.    1 2                 B0[19] = *A0; A0 += LDA; B1[19] = *A1; A1 += LDA;
  279.    1 2                 B0[20] = *A0; A0 += LDA; B1[20] = *A1; A1 += LDA;
  280.    1 2                 B0[21] = *A0; A0 += LDA; B1[21] = *A1; A1 += LDA;
  281.    1 2                 B0[22] = *A0; A0 += LDA; B1[22] = *A1; A1 += LDA;
  282.    1 2                 B0[23] = *A0; A0 += LDA; B1[23] = *A1; A1 += LDA;
  283.    1 2                 B0[24] = *A0; A0 += LDA; B1[24] = *A1; A1 += LDA;
  284.    1 2                 B0[25] = *A0; A0 += LDA; B1[25] = *A1; A1 += LDA;
  285.    1 2                 B0[26] = *A0; A0 += LDA; B1[26] = *A1; A1 += LDA;
  286.    1 2                 B0[27] = *A0; A0 += LDA; B1[27] = *A1; A1 += LDA;
  287.    1 2                 B0[28] = *A0; A0 += LDA; B1[28] = *A1; A1 += LDA;
  288.    1 2                 B0[29] = *A0; A0 += LDA; B1[29] = *A1; A1 += LDA;
  289.    1 2                 B0[30] = *A0; A0 += LDA; B1[30] = *A1; A1 += LDA;
  290.    1 2                 B0[31] = *A0; A0 += LDA; B1[31] = *A1; A1 += LDA;
  291.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 4 )
  292.    1 2                 B0[16] = *A0; A0 += LDA; B1[16] = *A1; A1 += LDA;
  293.    1 2                 B2[16] = *A2; A2 += LDA; B3[16] = *A3; A3 += LDA;
  294.    1 2                 B0[17] = *A0; A0 += LDA; B1[17] = *A1; A1 += LDA;
  295.    1 2                 B2[17] = *A2; A2 += LDA; B3[17] = *A3; A3 += LDA;
  296.    1 2                 B0[18] = *A0; A0 += LDA; B1[18] = *A1; A1 += LDA;
  297.    1 2                 B2[18] = *A2; A2 += LDA; B3[18] = *A3; A3 += LDA;
  298.    1 2                 B0[19] = *A0; A0 += LDA; B1[19] = *A1; A1 += LDA;
  299.    1 2                 B2[19] = *A2; A2 += LDA; B3[19] = *A3; A3 += LDA;
  300.    1 2                 B0[20] = *A0; A0 += LDA; B1[20] = *A1; A1 += LDA;
  301.    1 2                 B2[20] = *A2; A2 += LDA; B3[20] = *A3; A3 += LDA;
  302.    1 2                 B0[21] = *A0; A0 += LDA; B1[21] = *A1; A1 += LDA;
  303.    1 2                 B2[21] = *A2; A2 += LDA; B3[21] = *A3; A3 += LDA;
  304.    1 2                 B0[22] = *A0; A0 += LDA; B1[22] = *A1; A1 += LDA;
  305.    1 2                 B2[22] = *A2; A2 += LDA; B3[22] = *A3; A3 += LDA;
  306.    1 2                 B0[23] = *A0; A0 += LDA; B1[23] = *A1; A1 += LDA;
  307.    1 2                 B2[23] = *A2; A2 += LDA; B3[23] = *A3; A3 += LDA;
  308.    1 2                 B0[24] = *A0; A0 += LDA; B1[24] = *A1; A1 += LDA;
  309.    1 2                 B2[24] = *A2; A2 += LDA; B3[24] = *A3; A3 += LDA;
  310.    1 2                 B0[25] = *A0; A0 += LDA; B1[25] = *A1; A1 += LDA;
  311.    1 2                 B2[25] = *A2; A2 += LDA; B3[25] = *A3; A3 += LDA;
  312.    1 2                 B0[26] = *A0; A0 += LDA; B1[26] = *A1; A1 += LDA;
  313.    1 2                 B2[26] = *A2; A2 += LDA; B3[26] = *A3; A3 += LDA;
  314.    1 2                 B0[27] = *A0; A0 += LDA; B1[27] = *A1; A1 += LDA;
  315.    1 2                 B2[27] = *A2; A2 += LDA; B3[27] = *A3; A3 += LDA;
  316.    1 2                 B0[28] = *A0; A0 += LDA; B1[28] = *A1; A1 += LDA;
  317.    1 2                 B2[28] = *A2; A2 += LDA; B3[28] = *A3; A3 += LDA;
  318.    1 2                 B0[29] = *A0; A0 += LDA; B1[29] = *A1; A1 += LDA;
  319.    1 2                 B2[29] = *A2; A2 += LDA; B3[29] = *A3; A3 += LDA;
  320.    1 2                 B0[30] = *A0; A0 += LDA; B1[30] = *A1; A1 += LDA;
  321.    1 2                 B2[30] = *A2; A2 += LDA; B3[30] = *A3; A3 += LDA;
  322.    1 2                 B0[31] = *A0; A0 += LDA; B1[31] = *A1; A1 += LDA;
  323.    1 2                 B2[31] = *A2; A2 += LDA; B3[31] = *A3; A3 += LDA;
  324.    1 2        #endif
  325.    1 2        
  326.    1 2        #endif
  327.    1 2        #if   ( HPL_LATCPY_N_DEPTH == 1 )
  328.    1 2                 B0 += HPL_LATCPY_M_DEPTH;
  329.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 2 )
  330.    1 2                 B0 += HPL_LATCPY_M_DEPTH; B1 += HPL_LATCPY_M_DEPTH;
  331.    1 2        #elif ( HPL_LATCPY_N_DEPTH == 4 )
  332.    1 2                 B0 += HPL_LATCPY_M_DEPTH; B1 += HPL_LATCPY_M_DEPTH;
  333.    1 2                 B2 += HPL_LATCPY_M_DEPTH; B3 += HPL_LATCPY_M_DEPTH;
  334.    1 2        #endif
  335.    1 2------>       }
  336.    1          
  337.    1 Vcr2---<       for( i = mu; i < M; i++ )
  338.    1 Vcr2           {
  339.    1 Vcr2     #if   ( HPL_LATCPY_N_DEPTH == 1 )
  340.    1 Vcr2              *B0 = *A0; B0++; A0 += LDA;
  341.    1 Vcr2     #elif ( HPL_LATCPY_N_DEPTH == 2 )
  342.    1 Vcr2              *B0 = *A0; B0++; A0 += LDA; *B1 = *A1; B1++; A1 += LDA;
  343.    1 Vcr2     #elif ( HPL_LATCPY_N_DEPTH == 4 )
  344.    1 Vcr2              *B0 = *A0; B0++; A0 += LDA; *B1 = *A1; B1++; A1 += LDA;
  345.    1 Vcr2              *B2 = *A2; B2++; A2 += LDA; *B3 = *A3; B3++; A3 += LDA;
  346.    1 Vcr2     #endif
  347.    1 Vcr2--->       }
  348.    1          
  349.    1          #if   ( HPL_LATCPY_N_DEPTH == 1 )
  350.    1                A0 += incA; B0 += incB;
  351.    1          #elif ( HPL_LATCPY_N_DEPTH == 2 )
  352.    1                A0 += incA; A1 += incA; B0 += incB; B1 += incB;
  353.    1          #elif ( HPL_LATCPY_N_DEPTH == 4 )
  354.    1                A0 += incA; A1 += incA; A2 += incA; A3 += incA;
  355.    1                B0 += incB; B1 += incB; B2 += incB; B3 += incB;
  356.    1          #endif
  357.    1-------->    }
  358.               
  359.  + 1--------<    for( j = nu; j < N; j++, B0 += incB0, A0 += incA0 )
  360.    1             {
  361.  + 1 r2-----<       for( i = 0; i < mu; i += HPL_LATCPY_M_DEPTH, B0 += HPL_LATCPY_M_DEPTH )
  362.    1 r2             {
  363.    1 r2                B0[ 0]=*A0; A0 += LDA;
  364.    1 r2       #if ( HPL_LATCPY_M_DEPTH >  1 )
  365.    1 r2                B0[ 1]=*A0; A0 += LDA;
  366.    1 r2       #endif
  367.    1 r2       #if ( HPL_LATCPY_M_DEPTH >  2 )
  368.    1 r2                B0[ 2]=*A0; A0 += LDA; B0[ 3]=*A0; A0 += LDA;
  369.    1 r2       #endif
  370.    1 r2       #if ( HPL_LATCPY_M_DEPTH >  4 )
  371.    1 r2                B0[ 4]=*A0; A0 += LDA; B0[ 5]=*A0; A0 += LDA;
  372.    1 r2                B0[ 6]=*A0; A0 += LDA; B0[ 7]=*A0; A0 += LDA;
  373.    1 r2       #endif
  374.    1 r2       #if ( HPL_LATCPY_M_DEPTH >  8 )
  375.    1 r2                B0[ 8]=*A0; A0 += LDA; B0[ 9]=*A0; A0 += LDA;
  376.    1 r2                B0[10]=*A0; A0 += LDA; B0[11]=*A0; A0 += LDA;
  377.    1 r2                B0[12]=*A0; A0 += LDA; B0[13]=*A0; A0 += LDA;
  378.    1 r2                B0[14]=*A0; A0 += LDA; B0[15]=*A0; A0 += LDA;
  379.    1 r2       #endif
  380.    1 r2       #if ( HPL_LATCPY_M_DEPTH > 16 )
  381.    1 r2                B0[16]=*A0; A0 += LDA; B0[17]=*A0; A0 += LDA;
  382.    1 r2                B0[18]=*A0; A0 += LDA; B0[19]=*A0; A0 += LDA;
  383.    1 r2                B0[20]=*A0; A0 += LDA; B0[21]=*A0; A0 += LDA;
  384.    1 r2                B0[22]=*A0; A0 += LDA; B0[23]=*A0; A0 += LDA;
  385.    1 r2                B0[24]=*A0; A0 += LDA; B0[25]=*A0; A0 += LDA;
  386.    1 r2                B0[26]=*A0; A0 += LDA; B0[27]=*A0; A0 += LDA;
  387.    1 r2                B0[28]=*A0; A0 += LDA; B0[29]=*A0; A0 += LDA;
  388.    1 r2                B0[30]=*A0; A0 += LDA; B0[31]=*A0; A0 += LDA;
  389.    1 r2       #endif
  390.    1 r2----->       }
  391.    1          
  392.    1 Vcr2--<>       for( i = mu; i < M; i++, B0++, A0 += LDA ) { *B0 = *A0; }
  393.    1-------->    }
  394.               #endif
  395.               /*
  396.                * End of HPL_dlatcpy
  397.                */
  398.               } 

CC-6294 CC: VECTOR File = HPL_dlatcpy.c, Line = 165 
  A loop was not vectorized because a better candidate was found at line 337.

CC-6289 CC: VECTOR File = HPL_dlatcpy.c, Line = 167 
  A loop was not vectorized because a recurrence was found on "B0" between lines 172 and 183.

CC-6005 CC: SCALAR File = HPL_dlatcpy.c, Line = 337 
  A loop was unrolled 2 times.

CC-6213 CC: VECTOR File = HPL_dlatcpy.c, Line = 337 
  A loop was conditionally vectorized.

CC-6294 CC: VECTOR File = HPL_dlatcpy.c, Line = 359 
  A loop was not vectorized because a better candidate was found at line 392.

CC-6005 CC: SCALAR File = HPL_dlatcpy.c, Line = 361 
  A loop was unrolled 2 times.

CC-6254 CC: VECTOR File = HPL_dlatcpy.c, Line = 361 
  A loop was not vectorized because a recurrence was found on "B0" at line 368.

CC-6005 CC: SCALAR File = HPL_dlatcpy.c, Line = 392 
  A loop was unrolled 2 times.

CC-6213 CC: VECTOR File = HPL_dlatcpy.c, Line = 392 
  A loop was conditionally vectorized.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
