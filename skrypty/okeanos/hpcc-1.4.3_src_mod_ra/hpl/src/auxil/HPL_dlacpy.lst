%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/auxil/HPL_dlacpy.c
Compiled : 2016-03-19  13:19:23
Compiler : Version 8.4.5
Ftnlx    : Version 8413 (libcif 84006)
Target   : x86-64
Command  : driver.cc -h cpu=haswell -h static -D __CRAYXC -D __CRAY_HASWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -h network=aries
           -o ../../../src/auxil/HPL_dlacpy.o
           -c ../../../src/auxil/HPL_dlacpy.c -I ../../../include
           -I ../../../include/CrayX1 -D Add_ -D StringSunStyle
           -D F77_INTEGER=int -O 2 -h list=m -D LONG_IS_64BITS -h restrict=a
           -W l,--rpath=/opt/cray/cce/8.4.5/craylibs/x86-64
           -ibase-compiler /opt/cray/cce/8.4.5/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.4.5/craylibs/x86-64/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include-fixed
           -isystem /usr/include
           -I /opt/cray/mpt/7.3.2/gni/mpich-cray/8.3/include
           -I /opt/cray/libsci/16.03.1/CRAY/8.3/x86_64/include
           -I /opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I /opt/cray/pmi/5.0.10-1.0000.11050.0.0.ari/include
           -I /opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I /opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I /opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I /opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I /opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/../include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/..//include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I /opt/cray-hss-devel/7.2.0/include

clx report
------------
Source   : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/auxil/HPL_dlacpy.c
Date     : 03/19/2016  13:19:24


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.              /* 
    2.               * -- High Performance Computing Linpack Benchmark (HPL)                
    3.               *    HPL - 2.0 - September 10, 2008                          
    4.               *    Antoine P. Petitet                                                
    5.               *    University of Tennessee, Knoxville                                
    6.               *    Innovative Computing Laboratory                                 
    7.               *    (C) Copyright 2000-2008 All Rights Reserved                       
    8.               *                                                                      
    9.               * -- Copyright notice and Licensing terms:                             
   10.               *                                                                      
   11.               * Redistribution  and  use in  source and binary forms, with or without
   12.               * modification, are  permitted provided  that the following  conditions
   13.               * are met:                                                             
   14.               *                                                                      
   15.               * 1. Redistributions  of  source  code  must retain the above copyright
   16.               * notice, this list of conditions and the following disclaimer.        
   17.               *                                                                      
   18.               * 2. Redistributions in binary form must reproduce  the above copyright
   19.               * notice, this list of conditions,  and the following disclaimer in the
   20.               * documentation and/or other materials provided with the distribution. 
   21.               *                                                                      
   22.               * 3. All  advertising  materials  mentioning  features  or  use of this
   23.               * software must display the following acknowledgement:                 
   24.               * This  product  includes  software  developed  at  the  University  of
   25.               * Tennessee, Knoxville, Innovative Computing Laboratory.             
   26.               *                                                                      
   27.               * 4. The name of the  University,  the name of the  Laboratory,  or the
   28.               * names  of  its  contributors  may  not  be used to endorse or promote
   29.               * products  derived   from   this  software  without  specific  written
   30.               * permission.                                                          
   31.               *                                                                      
   32.               * -- Disclaimer:                                                       
   33.               *                                                                      
   34.               * THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   35.               * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
   36.               * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   37.               * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
   38.               * OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
   39.               * SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
   40.               * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   41.               * DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
   42.               * THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
   43.               * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   44.               * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
   45.               * ---------------------------------------------------------------------
   46.               */ 
   47.              /*
   48.               * Include files
   49.               */
   50.              #include "hpl.h"
   51.              /*
   52.               * Define default value for unrolling factors
   53.               * #ifndef HPL_LACPY_M_DEPTH
   54.               * #define    HPL_LACPY_M_DEPTH       32
   55.               * #define    HPL_LACPY_LOG2_M_DEPTH   5
   56.               * #endif
   57.               * #ifndef HPL_LACPY_N_DEPTH
   58.               * #define    HPL_LACPY_N_DEPTH        4
   59.               * #define    HPL_LACPY_LOG2_N_DEPTH   2
   60.               * #endif
   61.               */
   62.              #ifndef HPL_LACPY_M_DEPTH
   63.              #define    HPL_LACPY_M_DEPTH        4
   64.              #define    HPL_LACPY_LOG2_M_DEPTH   2
   65.              #endif
   66.              #ifndef HPL_LACPY_N_DEPTH
   67.              #define    HPL_LACPY_N_DEPTH        2
   68.              #define    HPL_LACPY_LOG2_N_DEPTH   1
   69.              #endif
   70.              
   71.              #ifdef HPL_STDC_HEADERS
   72.              void HPL_dlacpy
   73.              (
   74.                 const int                        M,
   75.                 const int                        N,
   76.                 const double *                   A,
   77.                 const int                        LDA,
   78.                 double *                         B,
   79.                 const int                        LDB
   80.              )
   81.              #else
   82.              void HPL_dlacpy
   83.              ( M, N, A, LDA, B, LDB )
   84.                 const int                        M;
   85.                 const int                        N;
   86.                 const double *                   A;
   87.                 const int                        LDA;
   88.                 double *                         B;
   89.                 const int                        LDB;
   90.              #endif
   91.              {
   92.              /* 
   93.               * Purpose
   94.               * =======
   95.               *
   96.               * HPL_dlacpy copies an array A into an array B.
   97.               * 
   98.               *
   99.               * Arguments
  100.               * =========
  101.               *
  102.               * M       (local input)                 const int
  103.               *         On entry,  M specifies the number of rows of the arrays A and
  104.               *         B. M must be at least zero.
  105.               *
  106.               * N       (local input)                 const int
  107.               *         On entry,  N specifies  the number of columns of the arrays A
  108.               *         and B. N must be at least zero.
  109.               *
  110.               * A       (local input)                 const double *
  111.               *         On entry, A points to an array of dimension (LDA,N).
  112.               *
  113.               * LDA     (local input)                 const int
  114.               *         On entry, LDA specifies the leading dimension of the array A.
  115.               *         LDA must be at least MAX(1,M).
  116.               *
  117.               * B       (local output)                double *
  118.               *         On entry, B points to an array of dimension (LDB,N). On exit,
  119.               *         B is overwritten with A.
  120.               *
  121.               * LDB     (local input)                 const int
  122.               *         On entry, LDB specifies the leading dimension of the array B.
  123.               *         LDB must be at least MAX(1,M).
  124.               *
  125.               * ---------------------------------------------------------------------
  126.               */ 
  127.              /*
  128.               * .. Local Variables ..
  129.               */
  130.              #ifdef HPL_LACPY_USE_COPY
  131.                 register int               j;
  132.              #else
  133.              #if   ( HPL_LACPY_N_DEPTH ==  1 )
  134.                 const double               * A0 = A;
  135.                 double                     * B0 = B;
  136.              #elif ( HPL_LACPY_N_DEPTH ==  2 )
  137.                 const double               * A0 = A,              * A1 = A +     LDA;
  138.                 double                     * B0 = B,              * B1 = B +     LDB;
  139.              #elif ( HPL_LACPY_N_DEPTH ==  4 )
  140.                 const double               * A0 = A,              * A1 = A +     LDA,
  141.                                            * A2 = A + (LDA << 1), * A3 = A + 3 * LDA;
  142.                 double                     * B0 = B,              * B1 = B +     LDB,
  143.                                            * B2 = B + (LDB << 1), * B3 = B + 3 * LDB;
  144.              #endif
  145.                 const int                  incA = ( (unsigned int)(LDA) <<
  146.                                                     HPL_LACPY_LOG2_N_DEPTH ) - M,
  147.                                            incB = ( (unsigned int)(LDB) <<
  148.                                                     HPL_LACPY_LOG2_N_DEPTH ) - M,
  149.                                            incA0 = (unsigned int)(LDA) - M,
  150.                                            incB0 = (unsigned int)(LDB) - M;
  151.                 int                        mu, nu;
  152.                 register int               i, j;
  153.              #endif
  154.              /* ..
  155.               * .. Executable Statements ..
  156.               */
  157.                 if( ( M <= 0 ) || ( N <= 0 ) ) return;
  158.              
  159.              #ifdef HPL_LACPY_USE_COPY
  160.                 for( j = 0; j < N; j++, A0 += LDA, B0 += LDB ) HPL_dcopy( M, A0, 1, B0, 1 );
  161.              #else
  162.                 mu = (int)( ( (unsigned int)(M) >> HPL_LACPY_LOG2_M_DEPTH ) <<
  163.                                                    HPL_LACPY_LOG2_M_DEPTH );
  164.                 nu = (int)( ( (unsigned int)(N) >> HPL_LACPY_LOG2_N_DEPTH ) <<
  165.                                                    HPL_LACPY_LOG2_N_DEPTH );
  166.              
  167.  + 1-------<    for( j = 0; j < nu; j += HPL_LACPY_N_DEPTH )
  168.    1            {
  169.  + 1 r8----<       for( i = 0; i < mu; i += HPL_LACPY_M_DEPTH )
  170.    1 r8            {
  171.    1 r8      #if   ( HPL_LACPY_N_DEPTH ==  1 )
  172.    1 r8               B0[ 0] = A0[ 0];
  173.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  2 )
  174.    1 r8               B0[ 0] = A0[ 0]; B1[ 0] = A1[ 0];
  175.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  4 )
  176.    1 r8               B0[ 0] = A0[ 0]; B1[ 0] = A1[ 0]; B2[ 0] = A2[ 0]; B3[ 0] = A3[ 0];
  177.    1 r8      #endif
  178.    1 r8      
  179.    1 r8      #if ( HPL_LACPY_M_DEPTH >  1 )
  180.    1 r8      
  181.    1 r8      #if   ( HPL_LACPY_N_DEPTH ==  1 )
  182.    1 r8               B0[ 1] = A0[ 1];
  183.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  2 )
  184.    1 r8               B0[ 1] = A0[ 1]; B1[ 1] = A1[ 1];
  185.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  4 )
  186.    1 r8               B0[ 1] = A0[ 1]; B1[ 1] = A1[ 1]; B2[ 1] = A2[ 1]; B3[ 1] = A3[ 1];
  187.    1 r8      #endif
  188.    1 r8      
  189.    1 r8      #endif
  190.    1 r8      #if ( HPL_LACPY_M_DEPTH >  2 )
  191.    1 r8      
  192.    1 r8      #if   ( HPL_LACPY_N_DEPTH ==  1 )
  193.    1 r8               B0[ 2] = A0[ 2]; B0[ 3] = A0[ 3];
  194.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  2 )
  195.    1 r8               B0[ 2] = A0[ 2]; B1[ 2] = A1[ 2]; B0[ 3] = A0[ 3]; B1[ 3] = A1[ 3];
  196.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  4 )
  197.    1 r8               B0[ 2] = A0[ 2]; B1[ 2] = A1[ 2]; B2[ 2] = A2[ 2]; B3[ 2] = A3[ 2];
  198.    1 r8               B0[ 3] = A0[ 3]; B1[ 3] = A1[ 3]; B2[ 3] = A2[ 3]; B3[ 3] = A3[ 3];
  199.    1 r8      #endif
  200.    1 r8      
  201.    1 r8      #endif
  202.    1 r8      #if ( HPL_LACPY_M_DEPTH >  4 )
  203.    1 r8      
  204.    1 r8      #if   ( HPL_LACPY_N_DEPTH ==  1 )
  205.    1 r8               B0[ 4] = A0[ 4]; B0[ 5] = A0[ 5]; B0[ 6] = A0[ 6]; B0[ 7] = A0[ 7];
  206.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  2 )
  207.    1 r8               B0[ 4] = A0[ 4]; B1[ 4] = A1[ 4]; B0[ 5] = A0[ 5]; B1[ 5] = A1[ 5];
  208.    1 r8               B0[ 6] = A0[ 6]; B1[ 6] = A1[ 6]; B0[ 7] = A0[ 7]; B1[ 7] = A1[ 7];
  209.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  4 )
  210.    1 r8               B0[ 4] = A0[ 4]; B1[ 4] = A1[ 4]; B2[ 4] = A2[ 4]; B3[ 4] = A3[ 4];
  211.    1 r8               B0[ 5] = A0[ 5]; B1[ 5] = A1[ 5]; B2[ 5] = A2[ 5]; B3[ 5] = A3[ 5];
  212.    1 r8               B0[ 6] = A0[ 6]; B1[ 6] = A1[ 6]; B2[ 6] = A2[ 6]; B3[ 6] = A3[ 6];
  213.    1 r8               B0[ 7] = A0[ 7]; B1[ 7] = A1[ 7]; B2[ 7] = A2[ 7]; B3[ 7] = A3[ 7];
  214.    1 r8      #endif
  215.    1 r8      
  216.    1 r8      #endif
  217.    1 r8      #if ( HPL_LACPY_M_DEPTH >  8 )
  218.    1 r8      
  219.    1 r8      #if   ( HPL_LACPY_N_DEPTH ==  1 )
  220.    1 r8               B0[ 8] = A0[ 8]; B0[ 9] = A0[ 9]; B0[10] = A0[10]; B0[11] = A0[11];
  221.    1 r8               B0[12] = A0[12]; B0[13] = A0[13]; B0[14] = A0[14]; B0[15] = A0[15];
  222.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  2 )
  223.    1 r8               B0[ 8] = A0[ 8]; B1[ 8] = A1[ 8]; B0[ 9] = A0[ 9]; B1[ 9] = A1[ 9];
  224.    1 r8               B0[10] = A0[10]; B1[10] = A1[10]; B0[11] = A0[11]; B1[11] = A1[11];
  225.    1 r8               B0[12] = A0[12]; B1[12] = A1[12]; B0[13] = A0[13]; B1[13] = A1[13];
  226.    1 r8               B0[14] = A0[14]; B1[14] = A1[14]; B0[15] = A0[15]; B1[15] = A1[15];
  227.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  4 )
  228.    1 r8               B0[ 8] = A0[ 8]; B1[ 8] = A1[ 8]; B2[ 8] = A2[ 8]; B3[ 8] = A3[ 8];
  229.    1 r8               B0[ 9] = A0[ 9]; B1[ 9] = A1[ 9]; B2[ 9] = A2[ 9]; B3[ 9] = A3[ 9];
  230.    1 r8               B0[10] = A0[10]; B1[10] = A1[10]; B2[10] = A2[10]; B3[10] = A3[10];
  231.    1 r8               B0[11] = A0[11]; B1[11] = A1[11]; B2[11] = A2[11]; B3[11] = A3[11];
  232.    1 r8               B0[12] = A0[12]; B1[12] = A1[12]; B2[12] = A2[12]; B3[12] = A3[12];
  233.    1 r8               B0[13] = A0[13]; B1[13] = A1[13]; B2[13] = A2[13]; B3[13] = A3[13];
  234.    1 r8               B0[14] = A0[14]; B1[14] = A1[14]; B2[14] = A2[14]; B3[14] = A3[14];
  235.    1 r8               B0[15] = A0[15]; B1[15] = A1[15]; B2[15] = A2[15]; B3[15] = A3[15];
  236.    1 r8      #endif
  237.    1 r8      
  238.    1 r8      #endif
  239.    1 r8      #if ( HPL_LACPY_M_DEPTH > 16 )
  240.    1 r8      
  241.    1 r8      #if   ( HPL_LACPY_N_DEPTH ==  1 )
  242.    1 r8               B0[16] = A0[16]; B0[17] = A0[17]; B0[18] = A0[18]; B0[19] = A0[19];
  243.    1 r8               B0[20] = A0[20]; B0[21] = A0[21]; B0[22] = A0[22]; B0[23] = A0[23];
  244.    1 r8               B0[24] = A0[24]; B0[25] = A0[25]; B0[26] = A0[26]; B0[27] = A0[27];
  245.    1 r8               B0[28] = A0[28]; B0[29] = A0[29]; B0[30] = A0[30]; B0[31] = A0[31];
  246.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  2 )
  247.    1 r8               B0[16] = A0[16]; B1[16] = A1[16]; B0[17] = A0[17]; B1[17] = A1[17];
  248.    1 r8               B0[18] = A0[18]; B1[18] = A1[18]; B0[19] = A0[19]; B1[19] = A1[19];
  249.    1 r8               B0[20] = A0[20]; B1[20] = A1[20]; B0[21] = A0[21]; B1[21] = A1[21];
  250.    1 r8               B0[22] = A0[22]; B1[22] = A1[22]; B0[23] = A0[23]; B1[23] = A1[23];
  251.    1 r8               B0[24] = A0[24]; B1[24] = A1[24]; B0[25] = A0[25]; B1[25] = A1[25];
  252.    1 r8               B0[26] = A0[26]; B1[26] = A1[26]; B0[27] = A0[27]; B1[27] = A1[27];
  253.    1 r8               B0[28] = A0[28]; B1[28] = A1[28]; B0[29] = A0[29]; B1[29] = A1[29];
  254.    1 r8               B0[30] = A0[30]; B1[30] = A1[30]; B0[31] = A0[31]; B1[31] = A1[31];
  255.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  4 )
  256.    1 r8               B0[16] = A0[16]; B1[16] = A1[16]; B2[16] = A2[16]; B3[16] = A3[16];
  257.    1 r8               B0[17] = A0[17]; B1[17] = A1[17]; B2[17] = A2[17]; B3[17] = A3[17];
  258.    1 r8               B0[18] = A0[18]; B1[18] = A1[18]; B2[18] = A2[18]; B3[18] = A3[18];
  259.    1 r8               B0[19] = A0[19]; B1[19] = A1[19]; B2[19] = A2[19]; B3[19] = A3[19];
  260.    1 r8               B0[20] = A0[20]; B1[20] = A1[20]; B2[20] = A2[20]; B3[20] = A3[20];
  261.    1 r8               B0[21] = A0[21]; B1[21] = A1[21]; B2[21] = A2[21]; B3[21] = A3[21];
  262.    1 r8               B0[22] = A0[22]; B1[22] = A1[22]; B2[22] = A2[22]; B3[22] = A3[22];
  263.    1 r8               B0[23] = A0[23]; B1[23] = A1[23]; B2[23] = A2[23]; B3[23] = A3[23];
  264.    1 r8               B0[24] = A0[24]; B1[24] = A1[24]; B2[24] = A2[24]; B3[24] = A3[24];
  265.    1 r8               B0[25] = A0[25]; B1[25] = A1[25]; B2[25] = A2[25]; B3[25] = A3[25];
  266.    1 r8               B0[26] = A0[26]; B1[26] = A1[26]; B2[26] = A2[26]; B3[26] = A3[26];
  267.    1 r8               B0[27] = A0[27]; B1[27] = A1[27]; B2[27] = A2[27]; B3[27] = A3[27];
  268.    1 r8               B0[28] = A0[28]; B1[28] = A1[28]; B2[28] = A2[28]; B3[28] = A3[28];
  269.    1 r8               B0[29] = A0[29]; B1[29] = A1[29]; B2[29] = A2[29]; B3[29] = A3[29];
  270.    1 r8               B0[30] = A0[30]; B1[30] = A1[30]; B2[30] = A2[30]; B3[30] = A3[30];
  271.    1 r8               B0[31] = A0[31]; B1[31] = A1[31]; B2[31] = A2[31]; B3[31] = A3[31];
  272.    1 r8      #endif
  273.    1 r8      
  274.    1 r8      #endif
  275.    1 r8      
  276.    1 r8      #if   ( HPL_LACPY_N_DEPTH ==  1 )
  277.    1 r8               A0 += HPL_LACPY_M_DEPTH; B0 += HPL_LACPY_M_DEPTH;
  278.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  2 )
  279.    1 r8               A0 += HPL_LACPY_M_DEPTH; B0 += HPL_LACPY_M_DEPTH;
  280.    1 r8               A1 += HPL_LACPY_M_DEPTH; B1 += HPL_LACPY_M_DEPTH;
  281.    1 r8      #elif ( HPL_LACPY_N_DEPTH ==  4 )
  282.    1 r8               A0 += HPL_LACPY_M_DEPTH; B0 += HPL_LACPY_M_DEPTH;
  283.    1 r8               A1 += HPL_LACPY_M_DEPTH; B1 += HPL_LACPY_M_DEPTH;
  284.    1 r8               A2 += HPL_LACPY_M_DEPTH; B2 += HPL_LACPY_M_DEPTH;
  285.    1 r8               A3 += HPL_LACPY_M_DEPTH; B3 += HPL_LACPY_M_DEPTH;
  286.    1 r8      #endif
  287.    1 r8---->       }
  288.    1         
  289.    1 Vr2---<       for( i = mu; i < M; i++ )
  290.    1 Vr2           {
  291.    1 Vr2     #if   ( HPL_LACPY_N_DEPTH ==  1 )
  292.    1 Vr2              *B0 = *A0; B0++; A0++;
  293.    1 Vr2     #elif ( HPL_LACPY_N_DEPTH ==  2 )
  294.    1 Vr2              *B0 = *A0; B0++; A0++; *B1 = *A1; B1++; A1++;
  295.    1 Vr2     #elif ( HPL_LACPY_N_DEPTH ==  4 )
  296.    1 Vr2              *B0 = *A0; B0++; A0++; *B1 = *A1; B1++; A1++;
  297.    1 Vr2              *B2 = *A2; B2++; A2++; *B3 = *A3; B3++; A3++;
  298.    1 Vr2     #endif
  299.    1 Vr2--->       }
  300.    1         
  301.    1         #if   ( HPL_LACPY_N_DEPTH ==  1 )
  302.    1               A0 += incA; B0 += incB;
  303.    1         #elif ( HPL_LACPY_N_DEPTH ==  2 )
  304.    1               A0 += incA; B0 += incB; A1 += incA; B1 += incB;
  305.    1         #elif ( HPL_LACPY_N_DEPTH ==  4 )
  306.    1               A0 += incA; B0 += incB; A1 += incA; B1 += incB;
  307.    1               A2 += incA; B2 += incB; A3 += incA; B3 += incB;
  308.    1         #endif
  309.    1------->    }
  310.              
  311.  + 1-------<    for( j = nu; j < N; j++, B0 += incB0, A0 += incA0 )
  312.    1            {
  313.  + 1 r8----<       for( i = 0; i < mu; i += HPL_LACPY_M_DEPTH,
  314.    1 r8                 B0 += HPL_LACPY_M_DEPTH, A0 += HPL_LACPY_M_DEPTH )
  315.    1 r8            {
  316.    1 r8               B0[ 0] = A0[ 0];
  317.    1 r8      #if ( HPL_LACPY_M_DEPTH >  1 )
  318.    1 r8               B0[ 1] = A0[ 1];
  319.    1 r8      #endif
  320.    1 r8      #if ( HPL_LACPY_M_DEPTH >  2 )
  321.    1 r8               B0[ 2] = A0[ 2]; B0[ 3] = A0[ 3];
  322.    1 r8      #endif
  323.    1 r8      #if ( HPL_LACPY_M_DEPTH >  4 )
  324.    1 r8               B0[ 4] = A0[ 4]; B0[ 5] = A0[ 5]; B0[ 6] = A0[ 6]; B0[ 7] = A0[ 7];
  325.    1 r8      #endif
  326.    1 r8      #if ( HPL_LACPY_M_DEPTH >  8 )
  327.    1 r8               B0[ 8] = A0[ 8]; B0[ 9] = A0[ 9]; B0[10] = A0[10]; B0[11] = A0[11];
  328.    1 r8               B0[12] = A0[12]; B0[13] = A0[13]; B0[14] = A0[14]; B0[15] = A0[15];
  329.    1 r8      #endif
  330.    1 r8      #if ( HPL_LACPY_M_DEPTH > 16 )
  331.    1 r8               B0[16] = A0[16]; B0[17] = A0[17]; B0[18] = A0[18]; B0[19] = A0[19];
  332.    1 r8               B0[20] = A0[20]; B0[21] = A0[21]; B0[22] = A0[22]; B0[23] = A0[23];
  333.    1 r8               B0[24] = A0[24]; B0[25] = A0[25]; B0[26] = A0[26]; B0[27] = A0[27];
  334.    1 r8               B0[28] = A0[28]; B0[29] = A0[29]; B0[30] = A0[30]; B0[31] = A0[31];
  335.    1 r8      #endif
  336.    1 r8---->       }
  337.    1 Vr2--<>       for( i = mu; i < M; i++, B0++, A0++ ) { *B0 = *A0; }
  338.    1------->    }
  339.              #endif
  340.              /*
  341.               * End of HPL_dlacpy
  342.               */
  343.              }

CC-6294 CC: VECTOR File = HPL_dlacpy.c, Line = 167 
  A loop was not vectorized because a better candidate was found at line 289.

CC-6332 CC: VECTOR File = HPL_dlacpy.c, Line = 169 
  A loop was not vectorized because it does not map well onto the target architecture.

CC-6005 CC: SCALAR File = HPL_dlacpy.c, Line = 169 
  A loop was unrolled 8 times.

CC-6005 CC: SCALAR File = HPL_dlacpy.c, Line = 289 
  A loop was unrolled 2 times.

CC-6204 CC: VECTOR File = HPL_dlacpy.c, Line = 289 
  A loop was vectorized.

CC-6294 CC: VECTOR File = HPL_dlacpy.c, Line = 311 
  A loop was not vectorized because a better candidate was found at line 337.

CC-6332 CC: VECTOR File = HPL_dlacpy.c, Line = 313 
  A loop was not vectorized because it does not map well onto the target architecture.

CC-6005 CC: SCALAR File = HPL_dlacpy.c, Line = 313 
  A loop was unrolled 8 times.

CC-6005 CC: SCALAR File = HPL_dlacpy.c, Line = 337 
  A loop was unrolled 2 times.

CC-6204 CC: VECTOR File = HPL_dlacpy.c, Line = 337 
  A loop was vectorized.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
