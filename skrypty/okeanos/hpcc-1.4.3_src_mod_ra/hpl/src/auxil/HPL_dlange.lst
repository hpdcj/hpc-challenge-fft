%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/auxil/HPL_dlange.c
Compiled : 2016-03-19  13:19:26
Compiler : Version 8.4.5
Ftnlx    : Version 8413 (libcif 84006)
Target   : x86-64
Command  : driver.cc -h cpu=haswell -h static -D __CRAYXC -D __CRAY_HASWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -h network=aries
           -o ../../../src/auxil/HPL_dlange.o
           -c ../../../src/auxil/HPL_dlange.c -I ../../../include
           -I ../../../include/CrayX1 -D Add_ -D StringSunStyle
           -D F77_INTEGER=int -O 2 -h list=m -D LONG_IS_64BITS -h restrict=a
           -W l,--rpath=/opt/cray/cce/8.4.5/craylibs/x86-64
           -ibase-compiler /opt/cray/cce/8.4.5/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.4.5/craylibs/x86-64/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include-fixed
           -isystem /usr/include
           -I /opt/cray/mpt/7.3.2/gni/mpich-cray/8.3/include
           -I /opt/cray/libsci/16.03.1/CRAY/8.3/x86_64/include
           -I /opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I /opt/cray/pmi/5.0.10-1.0000.11050.0.0.ari/include
           -I /opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I /opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I /opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I /opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I /opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/../include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/..//include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I /opt/cray-hss-devel/7.2.0/include

clx report
------------
Source   : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/auxil/HPL_dlange.c
Date     : 03/19/2016  13:19:26


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.              /* 
    2.               * -- High Performance Computing Linpack Benchmark (HPL)                
    3.               *    HPL - 2.0 - September 10, 2008                          
    4.               *    Antoine P. Petitet                                                
    5.               *    University of Tennessee, Knoxville                                
    6.               *    Innovative Computing Laboratory                                 
    7.               *    (C) Copyright 2000-2008 All Rights Reserved                       
    8.               *                                                                      
    9.               * -- Copyright notice and Licensing terms:                             
   10.               *                                                                      
   11.               * Redistribution  and  use in  source and binary forms, with or without
   12.               * modification, are  permitted provided  that the following  conditions
   13.               * are met:                                                             
   14.               *                                                                      
   15.               * 1. Redistributions  of  source  code  must retain the above copyright
   16.               * notice, this list of conditions and the following disclaimer.        
   17.               *                                                                      
   18.               * 2. Redistributions in binary form must reproduce  the above copyright
   19.               * notice, this list of conditions,  and the following disclaimer in the
   20.               * documentation and/or other materials provided with the distribution. 
   21.               *                                                                      
   22.               * 3. All  advertising  materials  mentioning  features  or  use of this
   23.               * software must display the following acknowledgement:                 
   24.               * This  product  includes  software  developed  at  the  University  of
   25.               * Tennessee, Knoxville, Innovative Computing Laboratory.             
   26.               *                                                                      
   27.               * 4. The name of the  University,  the name of the  Laboratory,  or the
   28.               * names  of  its  contributors  may  not  be used to endorse or promote
   29.               * products  derived   from   this  software  without  specific  written
   30.               * permission.                                                          
   31.               *                                                                      
   32.               * -- Disclaimer:                                                       
   33.               *                                                                      
   34.               * THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   35.               * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
   36.               * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   37.               * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
   38.               * OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
   39.               * SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
   40.               * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   41.               * DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
   42.               * THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
   43.               * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   44.               * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
   45.               * ---------------------------------------------------------------------
   46.               */ 
   47.              /*
   48.               * Include files
   49.               */
   50.              #include "hpl.h"
   51.              
   52.              #ifdef HPL_STDC_HEADERS
   53.              double HPL_dlange
   54.              (
   55.                 const HPL_T_NORM                 NORM,
   56.                 const int                        M,
   57.                 const int                        N,
   58.                 const double *                   A,
   59.                 const int                        LDA
   60.              )
   61.              #else
   62.              double HPL_dlange
   63.              ( NORM, M, N, A, LDA )
   64.                 const HPL_T_NORM                 NORM;
   65.                 const int                        M;
   66.                 const int                        N;
   67.                 const double *                   A;
   68.                 const int                        LDA;
   69.              #endif
   70.              {
   71.              /* 
   72.               * Purpose
   73.               * =======
   74.               *
   75.               * HPL_dlange returns  the value of the one norm,  or the infinity norm,
   76.               * or the element of largest absolute value of a matrix A:              
   77.               *  
   78.               *    max(abs(A(i,j))) when NORM = HPL_NORM_A,                          
   79.               *    norm1(A),        when NORM = HPL_NORM_1,                          
   80.               *    normI(A),        when NORM = HPL_NORM_I,                          
   81.               *  
   82.               * where norm1 denotes the one norm of a matrix (maximum column sum) and
   83.               * normI denotes  the infinity norm of a matrix (maximum row sum).  Note
   84.               * that max(abs(A(i,j))) is not a matrix norm.
   85.               *
   86.               * Arguments
   87.               * =========
   88.               *
   89.               * NORM    (local input)                 const HPL_T_NORM
   90.               *         On entry,  NORM  specifies  the  value to be returned by this
   91.               *         function as described above.
   92.               *
   93.               * M       (local input)                 const int
   94.               *         On entry,  M  specifies  the number  of rows of the matrix A.
   95.               *         M must be at least zero.
   96.               *
   97.               * N       (local input)                 const int
   98.               *         On entry,  N specifies the number of columns of the matrix A.
   99.               *         N must be at least zero.
  100.               *
  101.               * A       (local input)                 const double *
  102.               *         On entry,  A  points to an  array of dimension  (LDA,N), that
  103.               *         contains the matrix A.
  104.               *
  105.               * LDA     (local input)                 const int
  106.               *         On entry, LDA specifies the leading dimension of the array A.
  107.               *         LDA must be at least max(1,M).
  108.               *
  109.               * ---------------------------------------------------------------------
  110.               */ 
  111.              /*
  112.               * .. Local Variables ..
  113.               */
  114.                 double                     s, v0=HPL_rzero, * work = NULL;
  115.                 int                        i, j;
  116.              /* ..
  117.               * .. Executable Statements ..
  118.               */
  119.                 if( ( M <= 0 ) || ( N <= 0 ) ) return( HPL_rzero );
  120.              
  121.                 if(      NORM == HPL_NORM_A )
  122.                 {
  123.              /*
  124.               * max( abs( A ) )
  125.               */
  126.  + 1-------<       for( j = 0; j < N; j++ )
  127.    1               {
  128.  + 1 r4---<>          for( i = 0; i < M; i++ ) { v0 = Mmax( v0, Mabs( *A ) ); A++; }
  129.    1                  A += LDA - M;
  130.    1------->       }
  131.                 }
  132.                 else if( NORM == HPL_NORM_1 )
  133.                 {
  134.              /*
  135.               * Find norm_1( A ).
  136.               */
  137.                    work = (double*)malloc( (size_t)(N) * sizeof( double ) );
  138.                    if( work == NULL )
  139.  +                 { HPL_abort( __LINE__, "HPL_dlange", "Memory allocation failed" ); }
  140.                    else
  141.                    {
  142.  + 1-------<          for( j = 0; j < N; j++ )
  143.    1                  {
  144.    1                     s = HPL_rzero;
  145.    1 Vr6--<>             for( i = 0; i < M; i++ ) { s += Mabs( *A ); A++; }
  146.    1                     work[j] = s; A += LDA - M;
  147.    1------->          }
  148.              /*
  149.               * Find maximum sum of columns for 1-norm
  150.               */
  151.  +                    v0 = work[HPL_idamax( N, work, 1 )]; v0 = Mabs( v0 );
  152.                       if( work ) free( work );
  153.                    }
  154.                 }
  155.                 else if( NORM == HPL_NORM_I )
  156.                 {
  157.              /*
  158.               * Find norm_inf( A )
  159.               */
  160.                    work = (double*)malloc( (size_t)(M) * sizeof( double ) );
  161.                    if( work == NULL )
  162.  +                 { HPL_abort( __LINE__, "HPL_dlange", "Memory allocation failed" ); }
  163.                    else
  164.                    {
  165.    A------<>          for( i = 0; i < M; i++ ) { work[i] = HPL_rzero; }
  166.              
  167.  + 1-------<          for( j = 0; j < N; j++ )
  168.    1                  {
  169.    1 Vr2--<>             for( i = 0; i < M; i++ ) { work[i] += Mabs( *A ); A++; }
  170.    1                     A += LDA - M;
  171.    1------->          }
  172.              /*       
  173.               * Find maximum sum of rows for inf-norm
  174.               */      
  175.  +                    v0 = work[HPL_idamax( M, work, 1 )]; v0 = Mabs( v0 );
  176.                       if( work ) free( work );
  177.                    }
  178.                 }
  179.              
  180.                 return( v0 );
  181.              /*
  182.               * End of HPL_dlange
  183.               */
  184.              } 

CC-6254 CC: VECTOR File = HPL_dlange.c, Line = 126 
  A loop was not vectorized because a recurrence was found on "v0" at line 128.

CC-6005 CC: SCALAR File = HPL_dlange.c, Line = 128 
  A loop was unrolled 4 times.

CC-6254 CC: VECTOR File = HPL_dlange.c, Line = 128 
  A loop was not vectorized because a recurrence was found on "v0" at line 128.

CC-3021 CC: IPA File = HPL_dlange.c, Line = 139 
  "HPL_abort" (called from "HPL_dlange") was not inlined because the compiler was unable to locate the routine.

CC-6294 CC: VECTOR File = HPL_dlange.c, Line = 142 
  A loop was not vectorized because a better candidate was found at line 145.

CC-6005 CC: SCALAR File = HPL_dlange.c, Line = 145 
  A loop was unrolled 6 times.

CC-6204 CC: VECTOR File = HPL_dlange.c, Line = 145 
  A loop was vectorized.

CC-3021 CC: IPA File = HPL_dlange.c, Line = 151 
  "HPL_idamax" (called from "HPL_dlange") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_dlange.c, Line = 162 
  "HPL_abort" (called from "HPL_dlange") was not inlined because the compiler was unable to locate the routine.

CC-6202 CC: VECTOR File = HPL_dlange.c, Line = 165 
  A loop was replaced by a library call.

CC-6254 CC: VECTOR File = HPL_dlange.c, Line = 167 
  A loop was not vectorized because a recurrence was found on "work" at line 169.

CC-6005 CC: SCALAR File = HPL_dlange.c, Line = 169 
  A loop was unrolled 2 times.

CC-6204 CC: VECTOR File = HPL_dlange.c, Line = 169 
  A loop was vectorized.

CC-3021 CC: IPA File = HPL_dlange.c, Line = 175 
  "HPL_idamax" (called from "HPL_dlange") was not inlined because the compiler was unable to locate the routine.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
