%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/blas/HPL_daxpy.c
Compiled : 2016-03-19  13:19:27
Compiler : Version 8.4.5
Ftnlx    : Version 8413 (libcif 84006)
Target   : x86-64
Command  : driver.cc -h cpu=haswell -h static -D __CRAYXC -D __CRAY_HASWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -h network=aries
           -o ../../../src/blas/HPL_daxpy.o -c ../../../src/blas/HPL_daxpy.c
           -I ../../../include -I ../../../include/CrayX1 -D Add_
           -D StringSunStyle -D F77_INTEGER=int -O 2 -h list=m
           -D LONG_IS_64BITS -h restrict=a
           -W l,--rpath=/opt/cray/cce/8.4.5/craylibs/x86-64
           -ibase-compiler /opt/cray/cce/8.4.5/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.4.5/craylibs/x86-64/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include-fixed
           -isystem /usr/include
           -I /opt/cray/mpt/7.3.2/gni/mpich-cray/8.3/include
           -I /opt/cray/libsci/16.03.1/CRAY/8.3/x86_64/include
           -I /opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I /opt/cray/pmi/5.0.10-1.0000.11050.0.0.ari/include
           -I /opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I /opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I /opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I /opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I /opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/../include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/..//include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I /opt/cray-hss-devel/7.2.0/include

clx report
------------
Source   : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/blas/HPL_daxpy.c
Date     : 03/19/2016  13:19:27


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.     /*
    2.      * -- High Performance Computing Linpack Benchmark (HPL)
    3.      *    HPL - 2.0 - September 10, 2008
    4.      *    Antoine P. Petitet
    5.      *    University of Tennessee, Knoxville
    6.      *    Innovative Computing Laboratory
    7.      *    (C) Copyright 2000-2008 All Rights Reserved
    8.      *
    9.      * -- Copyright notice and Licensing terms:
   10.      *
   11.      * Redistribution  and  use in  source and binary forms, with or without
   12.      * modification, are  permitted provided  that the following  conditions
   13.      * are met:
   14.      *
   15.      * 1. Redistributions  of  source  code  must retain the above copyright
   16.      * notice, this list of conditions and the following disclaimer.
   17.      *
   18.      * 2. Redistributions in binary form must reproduce  the above copyright
   19.      * notice, this list of conditions,  and the following disclaimer in the
   20.      * documentation and/or other materials provided with the distribution.
   21.      *
   22.      * 3. All  advertising  materials  mentioning  features  or  use of this
   23.      * software must display the following acknowledgement:
   24.      * This  product  includes  software  developed  at  the  University  of
   25.      * Tennessee, Knoxville, Innovative Computing Laboratory.
   26.      *
   27.      * 4. The name of the  University,  the name of the  Laboratory,  or the
   28.      * names  of  its  contributors  may  not  be used to endorse or promote
   29.      * products  derived   from   this  software  without  specific  written
   30.      * permission.
   31.      *
   32.      * -- Disclaimer:
   33.      *
   34.      * THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   35.      * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
   36.      * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   37.      * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
   38.      * OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
   39.      * SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
   40.      * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   41.      * DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
   42.      * THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
   43.      * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   44.      * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   45.      * ---------------------------------------------------------------------
   46.      */
   47.     /*
   48.      * Include files
   49.      */
   50.     #include "hpl.h"
   51.     
   52.     #ifndef HPL_daxpy
   53.     
   54.     #ifdef HPL_STDC_HEADERS
   55.     void HPL_daxpy
   56.     (
   57.        const int                        N,
   58.        const double                     ALPHA,
   59.        const double *                   X,
   60.        const int                        INCX,
   61.        double *                         Y,
   62.        const int                        INCY
   63.     )
   64.     #else
   65.     void HPL_daxpy
   66.     ( N, ALPHA, X, INCX, Y, INCY )
   67.        const int                        N;
   68.        const double                     ALPHA;
   69.        const double *                   X;
   70.        const int                        INCX;
   71.        double *                         Y;
   72.        const int                        INCY;
   73.     #endif
   74.     {
   75.     /* 
   76.      * Purpose
   77.      * =======
   78.      *
   79.      * HPL_daxpy scales the vector x by alpha and adds it to y.
   80.      * 
   81.      *
   82.      * Arguments
   83.      * =========
   84.      *
   85.      * N       (local input)                 const int
   86.      *         On entry, N specifies the length of the vectors  x  and  y. N
   87.      *         must be at least zero.
   88.      *
   89.      * ALPHA   (local input)                 const double
   90.      *         On entry, ALPHA specifies the scalar alpha.   When  ALPHA  is
   91.      *         supplied as zero, then the entries of the incremented array X
   92.      *         need not be set on input.
   93.      *
   94.      * X       (local input)                 const double *
   95.      *         On entry,  X  is an incremented array of dimension  at  least
   96.      *         ( 1 + ( n - 1 ) * abs( INCX ) )  that  contains the vector x.
   97.      *
   98.      * INCX    (local input)                 const int
   99.      *         On entry, INCX specifies the increment for the elements of X.
  100.      *         INCX must not be zero.
  101.      *
  102.      * Y       (local input/output)          double *
  103.      *         On entry,  Y  is an incremented array of dimension  at  least
  104.      *         ( 1 + ( n - 1 ) * abs( INCY ) )  that  contains the vector y.
  105.      *         On exit, the entries of the incremented array  Y  are updated
  106.      *         with the scaled entries of the incremented array X.
  107.      *
  108.      * INCY    (local input)                 const int
  109.      *         On entry, INCY specifies the increment for the elements of Y.
  110.      *         INCY must not be zero.
  111.      *
  112.      * ---------------------------------------------------------------------
  113.      */ 
  114.     #ifdef HPL_CALL_CBLAS
  115.        cblas_daxpy( N, ALPHA, X, INCX, Y, INCY );
  116.     #endif
  117.     #ifdef HPL_CALL_VSIPL
  118.        register const double     alpha = ALPHA;
  119.        register double           x0, x1, x2, x3, y0, y1, y2, y3;
  120.        const double              * StX;
  121.        register int              i;
  122.        int                       nu;
  123.        const int                 incX2 = 2 * INCX, incY2 = 2 * INCY,
  124.                                  incX3 = 3 * INCX, incY3 = 3 * INCY,
  125.                                  incX4 = 4 * INCX, incY4 = 4 * INCY;
  126.     
  127.        if( ( N > 0 ) && ( alpha != HPL_rzero ) )
  128.        {
  129.           if( ( nu = ( N >> 2 ) << 2 ) != 0 )
  130.           {
  131.              StX = X + nu * INCX;
  132.      
  133.              do
  134.              {
  135.                 x0 = (*X);     y0 = (*Y);     x1 = X[INCX ]; y1 = Y[INCY ];
  136.                 x2 = X[incX2]; y2 = Y[incY2]; x3 = X[incX3]; y3 = Y[incY3];
  137.      
  138.                 *Y       = y0 + alpha * x0; Y[INCY ] = y1 + alpha * x1;
  139.                 Y[incY2] = y2 + alpha * x2; Y[incY3] = y3 + alpha * x3;
  140.      
  141.                 X  += incX4;
  142.                 Y  += incY4;
  143.      
  144.              } while( X != StX );
  145.           }
  146.      
  147.           for( i = N - nu; i != 0; i-- )
  148.           {
  149.              x0  = (*X);
  150.              y0  = (*Y);
  151.      
  152.              *Y  = y0 + alpha * x0;
  153.      
  154.              X  += INCX;
  155.              Y  += INCY;
  156.           }
  157.        }
  158.     #endif
  159.     #ifdef HPL_CALL_FBLAS
  160.        double                    alpha = ALPHA;
  161.     #ifdef HPL_USE_F77_INTEGER_DEF
  162.        const F77_INTEGER         F77N = N, F77incx = INCX, F77incy = INCY;
  163.     #else
  164.     #define F77N                 N
  165.     #define F77incx              INCX
  166.     #define F77incy              INCY
  167.     #endif
  168.  +     F77daxpy( &F77N, &alpha, X, &F77incx, Y, &F77incy );
  169.     #endif
  170.     /*
  171.      * End of HPL_daxpy
  172.      */
  173.     }
  174.      
  175.     #endif

CC-3021 CC: IPA File = HPL_daxpy.c, Line = 168 
  "daxpy_" (called from "HPL_daxpy") was not inlined because the compiler was unable to locate the routine.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
