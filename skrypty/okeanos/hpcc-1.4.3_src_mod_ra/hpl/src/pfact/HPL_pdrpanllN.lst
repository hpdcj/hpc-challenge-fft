%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/pfact/HPL_pdrpanllN.c
Compiled : 2016-03-19  13:19:53
Compiler : Version 8.4.5
Ftnlx    : Version 8413 (libcif 84006)
Target   : x86-64
Command  : driver.cc -h cpu=haswell -h static -D __CRAYXC -D __CRAY_HASWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -h network=aries
           -o ../../../src/pfact/HPL_pdrpanllN.o
           -c ../../../src/pfact/HPL_pdrpanllN.c -I ../../../include
           -I ../../../include/CrayX1 -D Add_ -D StringSunStyle
           -D F77_INTEGER=int -O 2 -h list=m -D LONG_IS_64BITS -h restrict=a
           -W l,--rpath=/opt/cray/cce/8.4.5/craylibs/x86-64
           -ibase-compiler /opt/cray/cce/8.4.5/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.4.5/craylibs/x86-64/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include-fixed
           -isystem /usr/include
           -I /opt/cray/mpt/7.3.2/gni/mpich-cray/8.3/include
           -I /opt/cray/libsci/16.03.1/CRAY/8.3/x86_64/include
           -I /opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I /opt/cray/pmi/5.0.10-1.0000.11050.0.0.ari/include
           -I /opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I /opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I /opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I /opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I /opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/../include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/..//include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I /opt/cray-hss-devel/7.2.0/include

clx report
------------
Source   : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/pfact/HPL_pdrpanllN.c
Date     : 03/19/2016  13:19:53


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.         /* 
    2.          * -- High Performance Computing Linpack Benchmark (HPL)                
    3.          *    HPL - 2.0 - September 10, 2008                          
    4.          *    Antoine P. Petitet                                                
    5.          *    University of Tennessee, Knoxville                                
    6.          *    Innovative Computing Laboratory                                 
    7.          *    (C) Copyright 2000-2008 All Rights Reserved                       
    8.          *                                                                      
    9.          * -- Copyright notice and Licensing terms:                             
   10.          *                                                                      
   11.          * Redistribution  and  use in  source and binary forms, with or without
   12.          * modification, are  permitted provided  that the following  conditions
   13.          * are met:                                                             
   14.          *                                                                      
   15.          * 1. Redistributions  of  source  code  must retain the above copyright
   16.          * notice, this list of conditions and the following disclaimer.        
   17.          *                                                                      
   18.          * 2. Redistributions in binary form must reproduce  the above copyright
   19.          * notice, this list of conditions,  and the following disclaimer in the
   20.          * documentation and/or other materials provided with the distribution. 
   21.          *                                                                      
   22.          * 3. All  advertising  materials  mentioning  features  or  use of this
   23.          * software must display the following acknowledgement:                 
   24.          * This  product  includes  software  developed  at  the  University  of
   25.          * Tennessee, Knoxville, Innovative Computing Laboratory.             
   26.          *                                                                      
   27.          * 4. The name of the  University,  the name of the  Laboratory,  or the
   28.          * names  of  its  contributors  may  not  be used to endorse or promote
   29.          * products  derived   from   this  software  without  specific  written
   30.          * permission.                                                          
   31.          *                                                                      
   32.          * -- Disclaimer:                                                       
   33.          *                                                                      
   34.          * THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   35.          * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
   36.          * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   37.          * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
   38.          * OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
   39.          * SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
   40.          * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   41.          * DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
   42.          * THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
   43.          * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   44.          * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
   45.          * ---------------------------------------------------------------------
   46.          */ 
   47.         /*
   48.          * Include files
   49.          */
   50.         #include "hpl.h"
   51.         
   52.         #ifdef HPL_STDC_HEADERS
   53.         void HPL_pdrpanllN
   54.         (
   55.            HPL_T_panel *                    PANEL,
   56.            const int                        M,
   57.            const int                        N,
   58.            const int                        ICOFF,
   59.            double *                         WORK
   60.         )
   61.         #else
   62.         void HPL_pdrpanllN
   63.         ( PANEL, M, N, ICOFF, WORK )
   64.            HPL_T_panel *                    PANEL;
   65.            const int                        M;
   66.            const int                        N;
   67.            const int                        ICOFF;
   68.            double *                         WORK;
   69.         #endif
   70.         {
   71.         /* 
   72.          * Purpose
   73.          * =======
   74.          *
   75.          * HPL_pdrpanllN recursively  factorizes  a panel  of columns using  the
   76.          * recursive Left-looking variant of the one-dimensional algorithm.  The
   77.          * lower triangular  N0-by-N0  upper block  of  the  panel  is stored in
   78.          * no-transpose form (i.e. just like the input matrix itself).
   79.          *  
   80.          * Bi-directional  exchange  is  used  to  perform  the  swap::broadcast
   81.          * operations  at once  for one column in the panel.  This  results in a
   82.          * lower number of slightly larger  messages than usual.  On P processes
   83.          * and assuming bi-directional links,  the running time of this function
   84.          * can be approximated by (when N is equal to N0):                      
   85.          *  
   86.          *    N0 * log_2( P ) * ( lat + ( 2*N0 + 4 ) / bdwth ) +
   87.          *    N0^2 * ( M - N0/3 ) * gam2-3
   88.          *  
   89.          * where M is the local number of rows of  the panel, lat and bdwth  are
   90.          * the latency and bandwidth of the network for  double  precision  real
   91.          * words,  and  gam2-3  is an estimate of the  Level 2 and Level 3  BLAS
   92.          * rate of execution. The  recursive  algorithm  allows indeed to almost
   93.          * achieve  Level 3 BLAS  performance  in the panel factorization.  On a
   94.          * large  number of modern machines,  this  operation is however latency
   95.          * bound,  meaning  that its cost can  be estimated  by only the latency
   96.          * portion N0 * log_2(P) * lat.  Mono-directional links will double this
   97.          * communication cost.
   98.          *
   99.          * Arguments
  100.          * =========
  101.          *
  102.          * PANEL   (local input/output)          HPL_T_panel *
  103.          *         On entry,  PANEL  points to the data structure containing the
  104.          *         panel information.
  105.          *
  106.          * M       (local input)                 const int
  107.          *         On entry,  M specifies the local number of rows of sub(A).
  108.          *
  109.          * N       (local input)                 const int
  110.          *         On entry,  N specifies the local number of columns of sub(A).
  111.          *
  112.          * ICOFF   (global input)                const int
  113.          *         On entry, ICOFF specifies the row and column offset of sub(A)
  114.          *         in A.
  115.          *
  116.          * WORK    (local workspace)             double *
  117.          *         On entry, WORK  is a workarray of size at least 2*(4+2*N0).
  118.          *
  119.          * ---------------------------------------------------------------------
  120.          */ 
  121.         /*
  122.          * .. Local Variables ..
  123.          */
  124.            double                     * A, * Aptr, * L1, * L1ptr;
  125.         #ifdef HPL_CALL_VSIPL
  126.            vsip_mview_d               * Av0, * Lv0, * Av1, * Av2, * Lv1;
  127.         #endif
  128.            int                        curr, ii, ioff, jb, jj, lda, m, n, n0, nb,
  129.                                       nbdiv, nbmin;
  130.         /* ..
  131.          * .. Executable Statements ..
  132.          */
  133.            if( N <= ( nbmin = PANEL->algo->nbmin ) )
  134.  +         { PANEL->algo->pffun( PANEL, M, N, ICOFF, WORK ); return; }
  135.         /*
  136.          * Find  new recursive blocking factor.  To avoid an infinite loop,  one
  137.          * must guarantee: 1 <= jb < N, knowing that  N  is greater than  NBMIN.
  138.          * First, we compute nblocks:  the number of blocks of size  NBMIN in N,
  139.          * including the last one that may be smaller.  nblocks  is thus  larger
  140.          * than or equal to one, since N >= NBMIN.
  141.          * The ratio ( nblocks + NDIV - 1 ) / NDIV  is thus larger than or equal
  142.          * to one as  well.  For  NDIV >= 2,  we  are guaranteed  that the quan-
  143.          * tity ( ( nblocks + NDIV  - 1 ) / NDIV ) * NBMIN  is less  than N  and
  144.          * greater than or equal to NBMIN.
  145.          */
  146.            nbdiv = PANEL->algo->nbdiv; ii = jj = 0; m = M; n = N;
  147.            nb = jb = ( (((N+nbmin-1) / nbmin) + nbdiv  - 1) / nbdiv ) * nbmin;
  148.          
  149.            A     = PANEL->A;   lda = PANEL->lda;
  150.            L1    = PANEL->L1;  n0  = PANEL->jb;
  151.            L1ptr = Mptr( L1, ICOFF, ICOFF, n0 );
  152.            curr  = (int)( PANEL->grid->myrow == PANEL->prow );
  153.         
  154.            if( curr != 0 ) Aptr = Mptr( A, ICOFF, ICOFF, lda );
  155.            else            Aptr = Mptr( A,     0, ICOFF, lda );
  156.         /*
  157.          * The triangular solve is replicated in every  process row.  The  panel
  158.          * factorization is  such that  the first rows of  A  are accumulated in
  159.          * every process row during the (panel) swapping phase.  We  ensure this
  160.          * way a minimum amount  of communication during the entire panel facto-
  161.          * rization.
  162.          */
  163.  + 1--<    do
  164.    1       {
  165.    1          n -= jb; ioff = ICOFF + jj;
  166.    1    /*
  167.    1     * Replicated solve - Local update - Factor current panel
  168.    1     */
  169.  + 1          HPL_dtrsm( HplColumnMajor, HplLeft, HplLower, HplNoTrans, HplUnit,
  170.    1                     jj, jb, HPL_rone, L1ptr, n0, Mptr( L1ptr, 0, jj, n0 ),
  171.    1                     n0 );
  172.    1    #ifdef HPL_CALL_VSIPL
  173.    1    /*
  174.    1     * Admit the blocks
  175.    1     */
  176.    1          (void) vsip_blockadmit_d( PANEL->Ablock,  VSIP_TRUE );
  177.    1          (void) vsip_blockadmit_d( PANEL->L1block, VSIP_TRUE );
  178.    1    /*
  179.    1     * Create the matrix views
  180.    1     */
  181.    1          Av0 = vsip_mbind_d( PANEL->Ablock,  0, 1, lda, lda, PANEL->pmat->nq );
  182.    1          Lv0 = vsip_mbind_d( PANEL->L1block, 0, 1,  n0,  n0, n0              );
  183.    1    /*
  184.    1     * Create the matrix subviews
  185.    1     */
  186.    1          if( curr != 0 )
  187.    1          {
  188.    1             Av1 = vsip_msubview_d( Av0, PANEL->ii+ICOFF+ii, PANEL->jj+ICOFF,
  189.    1                                    m, jj );
  190.    1             Av2 = vsip_msubview_d( Av0, PANEL->ii+ICOFF+ii, PANEL->jj+ioff,
  191.    1                                    m, jj );
  192.    1          }
  193.    1          else
  194.    1          {
  195.    1             Av1 = vsip_msubview_d( Av0, PANEL->ii+ii, PANEL->jj+ICOFF, m,  jj );
  196.    1             Av2 = vsip_msubview_d( Av0, PANEL->ii+ii, PANEL->jj+ioff,  m,  jj );
  197.    1          }
  198.    1          Lv1 = vsip_msubview_d( Lv0, ICOFF, ioff, jj, jb );
  199.    1    
  200.    1          vsip_gemp_d( -HPL_rone, Av1, VSIP_MAT_NTRANS, Lv1, VSIP_MAT_NTRANS,
  201.    1                       HPL_rone, Av2 );
  202.    1    /*
  203.    1     * Destroy the matrix subviews
  204.    1     */
  205.    1          (void) vsip_mdestroy_d( Lv1 ); 
  206.    1          (void) vsip_mdestroy_d( Av2 );
  207.    1          (void) vsip_mdestroy_d( Av1 );
  208.    1    /*
  209.    1     * Release the blocks
  210.    1     */
  211.    1          (void) vsip_blockrelease_d( vsip_mgetblock_d( Lv0 ), VSIP_TRUE );
  212.    1          (void) vsip_blockrelease_d( vsip_mgetblock_d( Av0 ), VSIP_TRUE );
  213.    1    /*
  214.    1     * Destroy the matrix views
  215.    1     */
  216.    1          (void) vsip_mdestroy_d( Lv0 );
  217.    1          (void) vsip_mdestroy_d( Av0 );
  218.    1    #else
  219.  + 1          HPL_dgemm( HplColumnMajor, HplNoTrans, HplNoTrans, m, jb,
  220.    1                     jj, -HPL_rone, Mptr( Aptr, ii, 0, lda ), lda,
  221.    1                     Mptr( L1ptr, 0, jj, n0 ), n0, HPL_rone,
  222.    1                     Mptr( Aptr, ii, jj, lda ), lda );
  223.    1    #endif
  224.  + 1          HPL_pdrpanllN( PANEL, m, jb, ioff, WORK );
  225.    1    /*
  226.    1     * Copy back upper part of A in current process row - Go the next block
  227.    1     */
  228.    1          if( curr != 0 )
  229.    1          {
  230.  + 1             HPL_dlacpy( ioff, jb, Mptr( L1, 0, ioff, n0 ), n0,
  231.    1                         Mptr( A, 0, ioff, lda ), lda );
  232.    1             ii += jb; m -= jb;
  233.    1          }
  234.    1          jj += jb; jb = Mmin( n, nb );
  235.    1    
  236.    1-->    } while( n > 0 );
  237.         /*
  238.          * End of HPL_pdrpanllN
  239.          */
  240.         }

CC-3021 CC: IPA File = HPL_pdrpanllN.c, Line = 134 
  "pffun" (called from "HPL_pdrpanllN") was not inlined because the compiler was unable to locate the routine.

CC-6287 CC: VECTOR File = HPL_pdrpanllN.c, Line = 163 
  A loop was not vectorized because it contains a call to function "HPL_dtrsm" on line 169.

CC-3021 CC: IPA File = HPL_pdrpanllN.c, Line = 169 
  "HPL_dtrsm" (called from "HPL_pdrpanllN") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdrpanllN.c, Line = 219 
  "HPL_dgemm" (called from "HPL_pdrpanllN") was not inlined because the compiler was unable to locate the routine.

CC-3039 CC: IPA File = HPL_pdrpanllN.c, Line = 224 
  "HPL_pdrpanllN" (called from "HPL_pdrpanllN") was not inlined because there is a recursive call.

CC-3021 CC: IPA File = HPL_pdrpanllN.c, Line = 230 
  "HPL_dlacpy" (called from "HPL_pdrpanllN") was not inlined because the compiler was unable to locate the routine.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
