%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/pgesv/HPL_logsort.c
Compiled : 2016-03-19  13:19:56
Compiler : Version 8.4.5
Ftnlx    : Version 8413 (libcif 84006)
Target   : x86-64
Command  : driver.cc -h cpu=haswell -h static -D __CRAYXC -D __CRAY_HASWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -h network=aries
           -o ../../../src/pgesv/HPL_logsort.o
           -c ../../../src/pgesv/HPL_logsort.c -I ../../../include
           -I ../../../include/CrayX1 -D Add_ -D StringSunStyle
           -D F77_INTEGER=int -O 2 -h list=m -D LONG_IS_64BITS -h restrict=a
           -W l,--rpath=/opt/cray/cce/8.4.5/craylibs/x86-64
           -ibase-compiler /opt/cray/cce/8.4.5/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.4.5/craylibs/x86-64/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include-fixed
           -isystem /usr/include
           -I /opt/cray/mpt/7.3.2/gni/mpich-cray/8.3/include
           -I /opt/cray/libsci/16.03.1/CRAY/8.3/x86_64/include
           -I /opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I /opt/cray/pmi/5.0.10-1.0000.11050.0.0.ari/include
           -I /opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I /opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I /opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I /opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I /opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/../include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/..//include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I /opt/cray-hss-devel/7.2.0/include

clx report
------------
Source   : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/pgesv/HPL_logsort.c
Date     : 03/19/2016  13:19:57


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.              /* 
    2.               * -- High Performance Computing Linpack Benchmark (HPL)                
    3.               *    HPL - 2.0 - September 10, 2008                          
    4.               *    Antoine P. Petitet                                                
    5.               *    University of Tennessee, Knoxville                                
    6.               *    Innovative Computing Laboratory                                 
    7.               *    (C) Copyright 2000-2008 All Rights Reserved                       
    8.               *                                                                      
    9.               * -- Copyright notice and Licensing terms:                             
   10.               *                                                                      
   11.               * Redistribution  and  use in  source and binary forms, with or without
   12.               * modification, are  permitted provided  that the following  conditions
   13.               * are met:                                                             
   14.               *                                                                      
   15.               * 1. Redistributions  of  source  code  must retain the above copyright
   16.               * notice, this list of conditions and the following disclaimer.        
   17.               *                                                                      
   18.               * 2. Redistributions in binary form must reproduce  the above copyright
   19.               * notice, this list of conditions,  and the following disclaimer in the
   20.               * documentation and/or other materials provided with the distribution. 
   21.               *                                                                      
   22.               * 3. All  advertising  materials  mentioning  features  or  use of this
   23.               * software must display the following acknowledgement:                 
   24.               * This  product  includes  software  developed  at  the  University  of
   25.               * Tennessee, Knoxville, Innovative Computing Laboratory.             
   26.               *                                                                      
   27.               * 4. The name of the  University,  the name of the  Laboratory,  or the
   28.               * names  of  its  contributors  may  not  be used to endorse or promote
   29.               * products  derived   from   this  software  without  specific  written
   30.               * permission.                                                          
   31.               *                                                                      
   32.               * -- Disclaimer:                                                       
   33.               *                                                                      
   34.               * THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   35.               * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
   36.               * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   37.               * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
   38.               * OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
   39.               * SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
   40.               * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   41.               * DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
   42.               * THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
   43.               * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   44.               * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
   45.               * ---------------------------------------------------------------------
   46.               */ 
   47.              /*
   48.               * Include files
   49.               */
   50.              #include "hpl.h"
   51.              
   52.              #ifdef HPL_STDC_HEADERS
   53.              void HPL_logsort
   54.              (
   55.                 const int                        NPROCS,
   56.                 const int                        ICURROC,
   57.                 int *                            IPLEN,
   58.                 int *                            IPMAP,
   59.                 int *                            IPMAPM1
   60.              )
   61.              #else
   62.              void HPL_logsort
   63.              ( NPROCS, ICURROC, IPLEN, IPMAP, IPMAPM1 )
   64.                 const int                        NPROCS;
   65.                 const int                        ICURROC;
   66.                 int *                            IPLEN;
   67.                 int *                            IPMAP;
   68.                 int *                            IPMAPM1;
   69.              #endif
   70.              {
   71.              /* 
   72.               * Purpose
   73.               * =======
   74.               *
   75.               * HPL_logsort computes an array  IPMAP  and  its inverse  IPMAPM1  that
   76.               * contain  the logarithmic sorted processes id with repect to the local
   77.               * number of rows of  U  that they own. This is necessary to ensure that
   78.               * the logarithmic spreading of U is optimal in terms of number of steps
   79.               * and communication volume as well.  In other words,  the larget pieces
   80.               * of U will be sent a minimal number of times.
   81.               *
   82.               * Arguments
   83.               * =========
   84.               *
   85.               * NPROCS  (global input)                const int
   86.               *         On entry, NPROCS  specifies the number of process rows in the
   87.               *         process grid. NPROCS is at least one.
   88.               *
   89.               * ICURROC (global input)                const int
   90.               *         On entry, ICURROC is the source process row.
   91.               *
   92.               * IPLEN   (global input/output)         int *
   93.               *         On entry, IPLEN is an array of dimension NPROCS+1,  such that
   94.               *         IPLEN[0] is 0, and IPLEN[i] contains the number of rows of U,
   95.               *         that process i-1 has.  On exit,  IPLEN[i]  is  the number  of
   96.               *         rows of U  in the processes before process IPMAP[i] after the
   97.               *         sort,  with  the convention that  IPLEN[NPROCS] is  the total
   98.               *         number  of rows  of the panel.  In other words,  IPLEN[i+1] -
   99.               *         IPLEN[i] is  the  number of rows of A that should be moved to
  100.               *         the process IPMAP[i].  IPLEN  is such that the number of rows
  101.               *         of  the  source process  row is IPLEN[1] - IPLEN[0],  and the
  102.               *         remaining  entries  of  this  array  are  sorted  so that the
  103.               *         quantities IPLEN[i+1]-IPLEN[i] are logarithmically sorted.
  104.               *
  105.               * IPMAP   (global output)               int *
  106.               *         On entry,  IPMAP  is an array of dimension  NPROCS.  On exit,
  107.               *         array contains  the logarithmic mapping of the processes.  In
  108.               *         other words, IPMAP[myroc] is the corresponding sorted process
  109.               *         coordinate.
  110.               *
  111.               * IPMAPM1 (global output)               int *
  112.               *         On entry, IPMAPM1  is an array of dimension NPROCS.  On exit,
  113.               *         this  array  contains  the inverse of the logarithmic mapping
  114.               *         contained  in  IPMAP:  IPMAPM1[ IPMAP[i] ] = i,  for all i in
  115.               *         [0.. NPROCS)
  116.               *
  117.               * ---------------------------------------------------------------------
  118.               */ 
  119.              /*
  120.               * .. Local Variables ..
  121.               */
  122.                 int                        dist, i, ip, iplen_i, iplen_j, itmp, j, k;
  123.              /* ..
  124.               * .. Executable Statements ..
  125.               */
  126.              /*
  127.               * Compute the  logarithmic distance between process j and process 0, as
  128.               * well as the maximum logarithmic distance. IPMAPM1 is workarray here.
  129.               */
  130.  + 1-------<    for( j = 0, dist = 0; j < NPROCS; j++ )
  131.    1            {
  132.    1               IPMAP[j] = MModAdd( j, ICURROC, NPROCS ); ip = j; itmp = 0;
  133.  + 1 2----<>       do { if( ip & 1 ) itmp++; ip >>= 1; } while ( ip );
  134.    1               IPMAPM1[j] = itmp; if( itmp > dist ) dist = itmp;
  135.    1------->    }
  136.              /*
  137.               * Shift IPLEN[1..NPROCS]  of ICURROC places,  so that  IPLEN[1]  is now
  138.               * what used to be IPLEN[ICURROC+1]. Initialize IPMAP,  so that IPMAP[0]
  139.               * is ICURROC.
  140.               */
  141.  + 1-------<    for( j = 0; j < ICURROC; j++ )
  142.    1            {
  143.    1 Vr2--<>       for( i = 2, itmp = IPLEN[1]; i <= NPROCS; i++ ) IPLEN[i-1] = IPLEN[i];
  144.    1               IPLEN[NPROCS] = itmp;
  145.    1------->    }
  146.              /*
  147.               * logarithmic sort
  148.               */
  149.  + 1-------<    for( k = 1; k <= dist; k++ )
  150.    1            {
  151.  + 1 2-----<       for( j = 1; j < NPROCS; j++ )
  152.    1 2             {
  153.    1 2                if( IPMAPM1[j] == k )
  154.    1 2                {
  155.  + 1 2 r4--<             for( i = 2; i < NPROCS; i++ )
  156.    1 2 r4                {
  157.    1 2 r4                   if( k < IPMAPM1[i] )
  158.    1 2 r4                   {
  159.    1 2 r4                      iplen_i = IPLEN[i+1]; iplen_j = IPLEN[j+1];
  160.    1 2 r4    
  161.    1 2 r4                      if( iplen_j < iplen_i )
  162.    1 2 r4                      {
  163.    1 2 r4                         IPLEN[j+1] = iplen_i;  IPLEN[i+1] = iplen_j;
  164.    1 2 r4                         itmp       = IPMAP[j]; IPMAP[j]   = IPMAP[i];
  165.    1 2 r4                         IPMAP[i]   = itmp;
  166.    1 2 r4                      }
  167.    1 2 r4                   }
  168.    1 2 r4-->             }
  169.    1 2                }
  170.    1 2----->       }
  171.    1------->    }
  172.              /*
  173.               * Compute IPLEN and IPMAPM1 (the inverse of IPMAP)
  174.               */
  175.                 IPLEN[0] = 0;
  176.              
  177.  + r4------<    for( i = 0; i < NPROCS; i++ )
  178.    r4           {
  179.    r4              IPMAPM1[ IPMAP[i] ] = i;
  180.    r4              IPLEN[i+1]         += IPLEN[i];
  181.    r4------>    }
  182.              /*
  183.               * End of HPL_logsort
  184.               */
  185.              }

CC-6268 CC: VECTOR File = HPL_logsort.c, Line = 130 
  A loop was not vectorized because it contains an inappropriate inner loop starting at line 133.

CC-6302 CC: VECTOR File = HPL_logsort.c, Line = 133 
  A loop was not vectorized because the loop starting at line 130 was not vectorizable.

CC-6289 CC: VECTOR File = HPL_logsort.c, Line = 141 
  A loop was not vectorized because a recurrence was found on "IPLEN" between lines 143 and 144.

CC-6005 CC: SCALAR File = HPL_logsort.c, Line = 143 
  A loop was unrolled 2 times.

CC-6204 CC: VECTOR File = HPL_logsort.c, Line = 143 
  A loop was vectorized.

CC-6254 CC: VECTOR File = HPL_logsort.c, Line = 149 
  A loop was not vectorized because a recurrence was found on "IPLEN" at line 163.

CC-6254 CC: VECTOR File = HPL_logsort.c, Line = 151 
  A loop was not vectorized because a recurrence was found on "IPLEN" at line 163.

CC-6005 CC: SCALAR File = HPL_logsort.c, Line = 155 
  A loop was unrolled 4 times.

CC-6254 CC: VECTOR File = HPL_logsort.c, Line = 155 
  A loop was not vectorized because a recurrence was found on "IPLEN" at line 163.

CC-6005 CC: SCALAR File = HPL_logsort.c, Line = 177 
  A loop was unrolled 4 times.

CC-6254 CC: VECTOR File = HPL_logsort.c, Line = 177 
  A loop was not vectorized because a recurrence was found on "IPLEN" at line 180.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
