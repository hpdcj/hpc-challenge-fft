%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/pauxil/HPL_dlaswp02N.c
Compiled : 2016-03-19  13:19:41
Compiler : Version 8.4.5
Ftnlx    : Version 8413 (libcif 84006)
Target   : x86-64
Command  : driver.cc -h cpu=haswell -h static -D __CRAYXC -D __CRAY_HASWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -h network=aries
           -o ../../../src/pauxil/HPL_dlaswp02N.o
           -c ../../../src/pauxil/HPL_dlaswp02N.c -I ../../../include
           -I ../../../include/CrayX1 -D Add_ -D StringSunStyle
           -D F77_INTEGER=int -O 2 -h list=m -D LONG_IS_64BITS -h restrict=a
           -W l,--rpath=/opt/cray/cce/8.4.5/craylibs/x86-64
           -ibase-compiler /opt/cray/cce/8.4.5/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.4.5/craylibs/x86-64/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include-fixed
           -isystem /usr/include
           -I /opt/cray/mpt/7.3.2/gni/mpich-cray/8.3/include
           -I /opt/cray/libsci/16.03.1/CRAY/8.3/x86_64/include
           -I /opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I /opt/cray/pmi/5.0.10-1.0000.11050.0.0.ari/include
           -I /opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I /opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I /opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I /opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I /opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/../include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/..//include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I /opt/cray-hss-devel/7.2.0/include

clx report
------------
Source   : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/pauxil/HPL_dlaswp02N.c
Date     : 03/19/2016  13:19:41


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.               /* 
    2.                * -- High Performance Computing Linpack Benchmark (HPL)                
    3.                *    HPL - 2.0 - September 10, 2008                          
    4.                *    Antoine P. Petitet                                                
    5.                *    University of Tennessee, Knoxville                                
    6.                *    Innovative Computing Laboratory                                 
    7.                *    (C) Copyright 2000-2008 All Rights Reserved                       
    8.                *                                                                      
    9.                * -- Copyright notice and Licensing terms:                             
   10.                *                                                                      
   11.                * Redistribution  and  use in  source and binary forms, with or without
   12.                * modification, are  permitted provided  that the following  conditions
   13.                * are met:                                                             
   14.                *                                                                      
   15.                * 1. Redistributions  of  source  code  must retain the above copyright
   16.                * notice, this list of conditions and the following disclaimer.        
   17.                *                                                                      
   18.                * 2. Redistributions in binary form must reproduce  the above copyright
   19.                * notice, this list of conditions,  and the following disclaimer in the
   20.                * documentation and/or other materials provided with the distribution. 
   21.                *                                                                      
   22.                * 3. All  advertising  materials  mentioning  features  or  use of this
   23.                * software must display the following acknowledgement:                 
   24.                * This  product  includes  software  developed  at  the  University  of
   25.                * Tennessee, Knoxville, Innovative Computing Laboratory.             
   26.                *                                                                      
   27.                * 4. The name of the  University,  the name of the  Laboratory,  or the
   28.                * names  of  its  contributors  may  not  be used to endorse or promote
   29.                * products  derived   from   this  software  without  specific  written
   30.                * permission.                                                          
   31.                *                                                                      
   32.                * -- Disclaimer:                                                       
   33.                *                                                                      
   34.                * THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   35.                * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
   36.                * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   37.                * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
   38.                * OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
   39.                * SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
   40.                * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   41.                * DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
   42.                * THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
   43.                * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   44.                * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
   45.                * ---------------------------------------------------------------------
   46.                */ 
   47.               /*
   48.                * Include files
   49.                */
   50.               #include "hpl.h"
   51.               /*
   52.                * Define default value for unrolling factor
   53.                */
   54.               #ifndef HPL_LASWP02N_DEPTH
   55.               #define    HPL_LASWP02N_DEPTH       32
   56.               #define    HPL_LASWP02N_LOG2_DEPTH   5
   57.               #endif
   58.               
   59.               #ifdef HPL_STDC_HEADERS
   60.               void HPL_dlaswp02N
   61.               (
   62.                  const int                        M,
   63.                  const int                        N,
   64.                  const double *                   A,
   65.                  const int                        LDA,
   66.                  double *                         W0,
   67.                  double *                         W,
   68.                  const int                        LDW,
   69.                  const int *                      LINDXA,
   70.                  const int *                      LINDXAU
   71.               )
   72.               #else
   73.               void HPL_dlaswp02N
   74.               ( M, N, A, LDA, W0, W, LDW, LINDXA, LINDXAU )
   75.                  const int                        M;
   76.                  const int                        N;
   77.                  const double *                   A;
   78.                  const int                        LDA;
   79.                  double *                         W0;
   80.                  double *                         W;
   81.                  const int                        LDW;
   82.                  const int *                      LINDXA;
   83.                  const int *                      LINDXAU;
   84.               #endif
   85.               {
   86.               /* 
   87.                * Purpose
   88.                * =======
   89.                *
   90.                * HPL_dlaswp02N packs scattered rows of an array  A  into workspace  W.
   91.                * The row offsets in A are specified by LINDXA.
   92.                *
   93.                * Arguments
   94.                * =========
   95.                *
   96.                * M       (local input)                 const int
   97.                *         On entry, M  specifies the number of rows of A that should be
   98.                *         copied into W. M must be at least zero.
   99.                *
  100.                * N       (local input)                 const int
  101.                *         On entry, N  specifies the length of rows of A that should be
  102.                *         copied into W. N must be at least zero.
  103.                *
  104.                * A       (local input)                 const double *
  105.                *         On entry, A points to an array of dimension (LDA,N). The rows
  106.                *         of this array specified by LINDXA should be copied into W.
  107.                *
  108.                * LDA     (local input)                 const int
  109.                *         On entry, LDA specifies the leading dimension of the array A.
  110.                *         LDA must be at least MAX(1,M).
  111.                *
  112.                * W0      (local input/output)          double *
  113.                *         On exit,  W0  is  an array of size (M-1)*LDW+1, that contains
  114.                *         the destination offset  in U where the columns of W should be
  115.                *         copied.
  116.                *
  117.                * W       (local output)                double *
  118.                *         On entry, W  is an array of size (LDW,M). On exit, W contains
  119.                *         the  rows LINDXA[i] for i in [0..M) of A stored  contiguously
  120.                *         in W(:,i).
  121.                *
  122.                * LDW     (local input)                 const int
  123.                *         On entry, LDW specifies the leading dimension of the array W.
  124.                *         LDW must be at least MAX(1,N+1).
  125.                *
  126.                * LINDXA  (local input)                 const int *
  127.                *         On entry, LINDXA is an array of dimension M that contains the
  128.                *         local row indexes of A that should be copied into W.
  129.                *
  130.                * LINDXAU (local input)                 const int *
  131.                *         On entry, LINDXAU  is an array of dimension M  that  contains
  132.                *         the local  row indexes of  U that should be copied into A and
  133.                *         replaced by the rows of W.
  134.                *
  135.                * ---------------------------------------------------------------------
  136.                */ 
  137.               /*
  138.                * .. Local Variables ..
  139.                */
  140.                  const double               * A0 = A, * a0;
  141.                  double                     * w0;
  142.                  const int                  incA = (int)( (unsigned int)(LDA) <<
  143.                                                           HPL_LASWP02N_LOG2_DEPTH );
  144.                  int                        nr, nu;
  145.                  register int               i, j;
  146.               /* ..
  147.                * .. Executable Statements ..
  148.                */
  149.                  if( ( M <= 0 ) || ( N <= 0 ) ) return;
  150.               
  151.  + r4-------<    for( i = 0; i < M; i++ ) 
  152.    r4------->       *(W0+(size_t)(i)*(size_t)(LDW)) = (double)(LINDXAU[i]);
  153.               
  154.                  nr = N - ( nu = (int)( ( (unsigned int)(N) >> HPL_LASWP02N_LOG2_DEPTH ) <<
  155.                                         HPL_LASWP02N_LOG2_DEPTH ) );
  156.               
  157.  + 1--------<    for( j = 0; j < nu;
  158.    1                  j += HPL_LASWP02N_DEPTH, A0 += incA, W += HPL_LASWP02N_DEPTH )
  159.    1             {
  160.  + 1 2------<       for( i = 0; i < M; i++ )
  161.    1 2              {
  162.    1 2                 a0 = A0 + (size_t)(LINDXA[i]); w0 = W + (size_t)(i) * (size_t)(LDW);
  163.    1 2        
  164.    1 2                 w0[ 0] = *a0; a0 += LDA;
  165.    1 2        #if ( HPL_LASWP02N_DEPTH >  1 )
  166.    1 2                 w0[ 1] = *a0; a0 += LDA;
  167.    1 2        #endif
  168.    1 2        #if ( HPL_LASWP02N_DEPTH >  2 )
  169.    1 2                 w0[ 2] = *a0; a0 += LDA; w0[ 3] = *a0; a0 += LDA;
  170.    1 2        #endif
  171.    1 2        #if ( HPL_LASWP02N_DEPTH >  4 )
  172.    1 2                 w0[ 4] = *a0; a0 += LDA; w0[ 5] = *a0; a0 += LDA;
  173.    1 2                 w0[ 6] = *a0; a0 += LDA; w0[ 7] = *a0; a0 += LDA;
  174.    1 2        #endif
  175.    1 2        #if ( HPL_LASWP02N_DEPTH >  8 )
  176.    1 2                 w0[ 8] = *a0; a0 += LDA; w0[ 9] = *a0; a0 += LDA;
  177.    1 2                 w0[10] = *a0; a0 += LDA; w0[11] = *a0; a0 += LDA;
  178.    1 2                 w0[12] = *a0; a0 += LDA; w0[13] = *a0; a0 += LDA;
  179.    1 2                 w0[14] = *a0; a0 += LDA; w0[15] = *a0; a0 += LDA;
  180.    1 2        #endif
  181.    1 2        #if ( HPL_LASWP02N_DEPTH > 16 )
  182.    1 2                 w0[16] = *a0; a0 += LDA; w0[17] = *a0; a0 += LDA;
  183.    1 2                 w0[18] = *a0; a0 += LDA; w0[19] = *a0; a0 += LDA;
  184.    1 2                 w0[20] = *a0; a0 += LDA; w0[21] = *a0; a0 += LDA;
  185.    1 2                 w0[22] = *a0; a0 += LDA; w0[23] = *a0; a0 += LDA;
  186.    1 2                 w0[24] = *a0; a0 += LDA; w0[25] = *a0; a0 += LDA;
  187.    1 2                 w0[26] = *a0; a0 += LDA; w0[27] = *a0; a0 += LDA;
  188.    1 2                 w0[28] = *a0; a0 += LDA; w0[29] = *a0; a0 += LDA;
  189.    1 2                 w0[30] = *a0; a0 += LDA; w0[31] = *a0; a0 += LDA;
  190.    1 2        #endif
  191.    1 2------>       }
  192.    1-------->    }
  193.               
  194.                  if( nr > 0 )
  195.                  {
  196.  + 1--------<       for( i = 0; i < M; i++ )
  197.    1                {
  198.    1                   a0 = A0 + (size_t)(LINDXA[i]); w0 = W + (size_t)(i) * (size_t)(LDW);
  199.    1 Vcr2--<>          for( j = 0; j < nr; j++, a0 += LDA ) { w0[j] = *a0; }
  200.    1-------->       }
  201.                  }
  202.               /*
  203.                * End of HPL_dlaswp02N
  204.                */
  205.               } 

CC-6005 CC: SCALAR File = HPL_dlaswp02N.c, Line = 151 
  A loop was unrolled 4 times.

CC-6290 CC: VECTOR File = HPL_dlaswp02N.c, Line = 151 
  A loop was not vectorized because a recurrence was found between "LINDXAU" and "W0" at line 152.

CC-6254 CC: VECTOR File = HPL_dlaswp02N.c, Line = 157 
  A loop was not vectorized because a recurrence was found on "w0" at line 169.

CC-6254 CC: VECTOR File = HPL_dlaswp02N.c, Line = 160 
  A loop was not vectorized because a recurrence was found on "w0" at line 169.

CC-6294 CC: VECTOR File = HPL_dlaswp02N.c, Line = 196 
  A loop was not vectorized because a better candidate was found at line 199.

CC-6005 CC: SCALAR File = HPL_dlaswp02N.c, Line = 199 
  A loop was unrolled 2 times.

CC-6213 CC: VECTOR File = HPL_dlaswp02N.c, Line = 199 
  A loop was conditionally vectorized.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
