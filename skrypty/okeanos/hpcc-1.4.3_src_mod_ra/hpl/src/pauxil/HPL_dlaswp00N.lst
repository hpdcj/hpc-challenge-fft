%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/pauxil/HPL_dlaswp00N.c
Compiled : 2016-03-19  13:19:38
Compiler : Version 8.4.5
Ftnlx    : Version 8413 (libcif 84006)
Target   : x86-64
Command  : driver.cc -h cpu=haswell -h static -D __CRAYXC -D __CRAY_HASWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -h network=aries
           -o ../../../src/pauxil/HPL_dlaswp00N.o
           -c ../../../src/pauxil/HPL_dlaswp00N.c -I ../../../include
           -I ../../../include/CrayX1 -D Add_ -D StringSunStyle
           -D F77_INTEGER=int -O 2 -h list=m -D LONG_IS_64BITS -h restrict=a
           -W l,--rpath=/opt/cray/cce/8.4.5/craylibs/x86-64
           -ibase-compiler /opt/cray/cce/8.4.5/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.4.5/craylibs/x86-64/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include-fixed
           -isystem /usr/include
           -I /opt/cray/mpt/7.3.2/gni/mpich-cray/8.3/include
           -I /opt/cray/libsci/16.03.1/CRAY/8.3/x86_64/include
           -I /opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I /opt/cray/pmi/5.0.10-1.0000.11050.0.0.ari/include
           -I /opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I /opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I /opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I /opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I /opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/../include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/..//include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I /opt/cray-hss-devel/7.2.0/include

clx report
------------
Source   : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/pauxil/HPL_dlaswp00N.c
Date     : 03/19/2016  13:19:38


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.              /* 
    2.               * -- High Performance Computing Linpack Benchmark (HPL)                
    3.               *    HPL - 2.0 - September 10, 2008                          
    4.               *    Antoine P. Petitet                                                
    5.               *    University of Tennessee, Knoxville                                
    6.               *    Innovative Computing Laboratory                                 
    7.               *    (C) Copyright 2000-2008 All Rights Reserved                       
    8.               *                                                                      
    9.               * -- Copyright notice and Licensing terms:                             
   10.               *                                                                      
   11.               * Redistribution  and  use in  source and binary forms, with or without
   12.               * modification, are  permitted provided  that the following  conditions
   13.               * are met:                                                             
   14.               *                                                                      
   15.               * 1. Redistributions  of  source  code  must retain the above copyright
   16.               * notice, this list of conditions and the following disclaimer.        
   17.               *                                                                      
   18.               * 2. Redistributions in binary form must reproduce  the above copyright
   19.               * notice, this list of conditions,  and the following disclaimer in the
   20.               * documentation and/or other materials provided with the distribution. 
   21.               *                                                                      
   22.               * 3. All  advertising  materials  mentioning  features  or  use of this
   23.               * software must display the following acknowledgement:                 
   24.               * This  product  includes  software  developed  at  the  University  of
   25.               * Tennessee, Knoxville, Innovative Computing Laboratory.             
   26.               *                                                                      
   27.               * 4. The name of the  University,  the name of the  Laboratory,  or the
   28.               * names  of  its  contributors  may  not  be used to endorse or promote
   29.               * products  derived   from   this  software  without  specific  written
   30.               * permission.                                                          
   31.               *                                                                      
   32.               * -- Disclaimer:                                                       
   33.               *                                                                      
   34.               * THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   35.               * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
   36.               * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   37.               * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
   38.               * OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
   39.               * SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
   40.               * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   41.               * DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
   42.               * THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
   43.               * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   44.               * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
   45.               * ---------------------------------------------------------------------
   46.               */ 
   47.              /*
   48.               * Include files
   49.               */
   50.              #include "hpl.h"
   51.              /*
   52.               * Define default value for unrolling factor
   53.               */
   54.              #ifndef HPL_LASWP00N_DEPTH
   55.              #define    HPL_LASWP00N_DEPTH       32
   56.              #define    HPL_LASWP00N_LOG2_DEPTH   5
   57.              #endif
   58.              
   59.              #ifdef HPL_STDC_HEADERS
   60.              void HPL_dlaswp00N
   61.              (
   62.                 const int                        M,
   63.                 const int                        N,
   64.                 double *                         A,
   65.                 const int                        LDA,
   66.                 const int *                      IPIV
   67.              )
   68.              #else
   69.              void HPL_dlaswp00N
   70.              ( M, N, A, LDA, IPIV )
   71.                 const int                        M;
   72.                 const int                        N;
   73.                 double *                         A;
   74.                 const int                        LDA;
   75.                 const int *                      IPIV;
   76.              #endif
   77.              {
   78.              /* 
   79.               * Purpose
   80.               * =======
   81.               *
   82.               * HPL_dlaswp00N performs a series of local row interchanges on a matrix
   83.               * A. One row interchange is initiated for rows 0 through M-1 of A.
   84.               *
   85.               * Arguments
   86.               * =========
   87.               *
   88.               * M       (local input)                 const int
   89.               *         On entry, M specifies the number of rows of the array A to be
   90.               *         interchanged. M must be at least zero.
   91.               *
   92.               * N       (local input)                 const int
   93.               *         On entry, N  specifies  the number of columns of the array A.
   94.               *         N must be at least zero.
   95.               *
   96.               * A       (local input/output)          double *
   97.               *         On entry, A  points to an array of dimension (LDA,N) to which
   98.               *         the row interchanges will be  applied.  On exit, the permuted
   99.               *         matrix.
  100.               *
  101.               * LDA     (local input)                 const int
  102.               *         On entry, LDA specifies the leading dimension of the array A.
  103.               *         LDA must be at least MAX(1,M).
  104.               *
  105.               * IPIV    (local input)                 const int *
  106.               *         On entry,  IPIV  is  an  array of size  M  that  contains the
  107.               *         pivoting  information.  For  k  in [0..M),  IPIV[k]=IROFF + l
  108.               *         implies that local rows k and l are to be interchanged.
  109.               *
  110.               * ---------------------------------------------------------------------
  111.               */ 
  112.              /*
  113.               * .. Local Variables ..
  114.               */
  115.                 register double            r;
  116.                 double                     * a0, * a1;
  117.                 const int                  incA = (int)( (unsigned int)(LDA) <<
  118.                                                          HPL_LASWP00N_LOG2_DEPTH );
  119.                 int                        ip, nr, nu;
  120.                 register int               i, j;
  121.              /* ..
  122.               * .. Executable Statements ..
  123.               */
  124.                 if( ( M <= 0 ) || ( N <= 0 ) ) return;
  125.              
  126.                 nr = N - ( nu = (int)( ( (unsigned int)(N) >> HPL_LASWP00N_LOG2_DEPTH )
  127.                                        << HPL_LASWP00N_LOG2_DEPTH ) );
  128.              
  129.  + 1-------<    for( j = 0; j < nu; j += HPL_LASWP00N_DEPTH, A += incA )
  130.    1            {
  131.  + 1 2-----<       for( i = 0; i < M; i++ )
  132.    1 2             {
  133.    1 2                if( i != ( ip = IPIV[i] ) )
  134.    1 2                {
  135.    1 2                   a0 = A + i; a1 = A + ip;
  136.    1 2       
  137.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  138.    1 2       #if ( HPL_LASWP00N_DEPTH >  1 )
  139.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  140.    1 2       #endif
  141.    1 2       #if ( HPL_LASWP00N_DEPTH >  2 )
  142.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  143.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  144.    1 2       #endif
  145.    1 2       #if ( HPL_LASWP00N_DEPTH >  4 )
  146.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  147.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  148.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  149.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  150.    1 2       #endif
  151.    1 2       #if ( HPL_LASWP00N_DEPTH >  8 )
  152.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  153.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  154.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  155.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  156.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  157.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  158.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  159.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  160.    1 2       #endif
  161.    1 2       #if ( HPL_LASWP00N_DEPTH > 16 )
  162.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  163.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  164.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  165.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  166.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  167.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  168.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  169.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  170.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  171.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  172.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  173.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  174.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  175.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  176.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  177.    1 2                   r = *a0; *a0 = *a1; *a1 = r; a0 += LDA; a1 += LDA;
  178.    1 2       #endif
  179.    1 2                }
  180.    1 2----->       }
  181.    1------->    }
  182.              
  183.                 if( nr > 0 )
  184.                 {
  185.  + 1-------<       for( i = 0; i < M; i++ )
  186.    1               {
  187.    1                  if( i != ( ip = IPIV[i] ) )
  188.    1                  {
  189.    1                     a0 = A + i; a1 = A + ip;
  190.    1 Vcr2--<             for( j = 0; j < nr; j++, a0 += LDA, a1 += LDA )
  191.    1 Vcr2-->             { r = *a0; *a0 = *a1; *a1 = r; }
  192.    1                  }
  193.    1------->       }
  194.                 }
  195.              /*
  196.               * End of HPL_dlaswp00N
  197.               */
  198.              }

CC-6289 CC: VECTOR File = HPL_dlaswp00N.c, Line = 129 
  A loop was not vectorized because a recurrence was found on "a0" between lines 137 and 139.

CC-6289 CC: VECTOR File = HPL_dlaswp00N.c, Line = 131 
  A loop was not vectorized because a recurrence was found on "a0" between lines 137 and 139.

CC-6294 CC: VECTOR File = HPL_dlaswp00N.c, Line = 185 
  A loop was not vectorized because a better candidate was found at line 190.

CC-6005 CC: SCALAR File = HPL_dlaswp00N.c, Line = 190 
  A loop was unrolled 2 times.

CC-6213 CC: VECTOR File = HPL_dlaswp00N.c, Line = 190 
  A loop was conditionally vectorized.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
