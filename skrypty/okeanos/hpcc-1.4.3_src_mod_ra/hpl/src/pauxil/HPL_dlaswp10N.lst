%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/pauxil/HPL_dlaswp10N.c
Compiled : 2016-03-19  13:19:39
Compiler : Version 8.4.5
Ftnlx    : Version 8413 (libcif 84006)
Target   : x86-64
Command  : driver.cc -h cpu=haswell -h static -D __CRAYXC -D __CRAY_HASWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -h network=aries
           -o ../../../src/pauxil/HPL_dlaswp10N.o
           -c ../../../src/pauxil/HPL_dlaswp10N.c -I ../../../include
           -I ../../../include/CrayX1 -D Add_ -D StringSunStyle
           -D F77_INTEGER=int -O 2 -h list=m -D LONG_IS_64BITS -h restrict=a
           -W l,--rpath=/opt/cray/cce/8.4.5/craylibs/x86-64
           -ibase-compiler /opt/cray/cce/8.4.5/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.4.5/craylibs/x86-64/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include-fixed
           -isystem /usr/include
           -I /opt/cray/mpt/7.3.2/gni/mpich-cray/8.3/include
           -I /opt/cray/libsci/16.03.1/CRAY/8.3/x86_64/include
           -I /opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I /opt/cray/pmi/5.0.10-1.0000.11050.0.0.ari/include
           -I /opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I /opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I /opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I /opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I /opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/../include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/..//include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I /opt/cray-hss-devel/7.2.0/include

clx report
------------
Source   : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../src/pauxil/HPL_dlaswp10N.c
Date     : 03/19/2016  13:19:40


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.             /* 
    2.              * -- High Performance Computing Linpack Benchmark (HPL)                
    3.              *    HPL - 2.0 - September 10, 2008                          
    4.              *    Antoine P. Petitet                                                
    5.              *    University of Tennessee, Knoxville                                
    6.              *    Innovative Computing Laboratory                                 
    7.              *    (C) Copyright 2000-2008 All Rights Reserved                       
    8.              *                                                                      
    9.              * -- Copyright notice and Licensing terms:                             
   10.              *                                                                      
   11.              * Redistribution  and  use in  source and binary forms, with or without
   12.              * modification, are  permitted provided  that the following  conditions
   13.              * are met:                                                             
   14.              *                                                                      
   15.              * 1. Redistributions  of  source  code  must retain the above copyright
   16.              * notice, this list of conditions and the following disclaimer.        
   17.              *                                                                      
   18.              * 2. Redistributions in binary form must reproduce  the above copyright
   19.              * notice, this list of conditions,  and the following disclaimer in the
   20.              * documentation and/or other materials provided with the distribution. 
   21.              *                                                                      
   22.              * 3. All  advertising  materials  mentioning  features  or  use of this
   23.              * software must display the following acknowledgement:                 
   24.              * This  product  includes  software  developed  at  the  University  of
   25.              * Tennessee, Knoxville, Innovative Computing Laboratory.             
   26.              *                                                                      
   27.              * 4. The name of the  University,  the name of the  Laboratory,  or the
   28.              * names  of  its  contributors  may  not  be used to endorse or promote
   29.              * products  derived   from   this  software  without  specific  written
   30.              * permission.                                                          
   31.              *                                                                      
   32.              * -- Disclaimer:                                                       
   33.              *                                                                      
   34.              * THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   35.              * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
   36.              * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   37.              * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
   38.              * OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
   39.              * SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
   40.              * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   41.              * DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
   42.              * THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
   43.              * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   44.              * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
   45.              * ---------------------------------------------------------------------
   46.              */ 
   47.             /*
   48.              * Include files
   49.              */
   50.             #include "hpl.h"
   51.             /*
   52.              * Define default value for unrolling factor
   53.              */
   54.             #ifndef HPL_LASWP10N_DEPTH
   55.             #define    HPL_LASWP10N_DEPTH       32
   56.             #define    HPL_LASWP10N_LOG2_DEPTH   5
   57.             #endif
   58.             
   59.             #ifdef HPL_STDC_HEADERS
   60.             void HPL_dlaswp10N
   61.             (
   62.                const int                        M,
   63.                const int                        N,
   64.                double *                         A,
   65.                const int                        LDA,
   66.                const int *                      IPIV
   67.             )
   68.             #else
   69.             void HPL_dlaswp10N
   70.             ( M, N, A, LDA, IPIV )
   71.                const int                        M;
   72.                const int                        N;
   73.                double *                         A;
   74.                const int                        LDA;
   75.                const int *                      IPIV;
   76.             #endif
   77.             {
   78.             /* 
   79.              * Purpose
   80.              * =======
   81.              *
   82.              * HPL_dlaswp10N performs a sequence  of  local column interchanges on a
   83.              * matrix A.  One column interchange is initiated  for columns 0 through
   84.              * N-1 of A.
   85.              *
   86.              * Arguments
   87.              * =========
   88.              *
   89.              * M       (local input)                 const int
   90.              *         __arg0__
   91.              *
   92.              * N       (local input)                 const int
   93.              *         On entry,  M  specifies  the number of rows of the array A. M
   94.              *         must be at least zero.
   95.              *
   96.              * A       (local input/output)          double *
   97.              *         On entry, N specifies the number of columns of the array A. N
   98.              *         must be at least zero.
   99.              *
  100.              * LDA     (local input)                 const int
  101.              *         On entry, A  points to an  array of  dimension (LDA,N).  This
  102.              *         array contains the columns onto which the interchanges should
  103.              *         be applied. On exit, A contains the permuted matrix.
  104.              *
  105.              * IPIV    (local input)                 const int *
  106.              *         On entry, LDA specifies the leading dimension of the array A.
  107.              *         LDA must be at least MAX(1,M).
  108.              *
  109.              * ---------------------------------------------------------------------
  110.              */ 
  111.             /*
  112.              * .. Local Variables ..
  113.              */
  114.                double                     r;
  115.                double                     * a0, * a1;
  116.                const int                  incA = ( 1 << HPL_LASWP10N_LOG2_DEPTH );
  117.                int                        jp, mr, mu;
  118.                register int               i, j;
  119.             /* ..
  120.              * .. Executable Statements ..
  121.              */
  122.                if( ( M <= 0 ) || ( N <= 0 ) ) return;
  123.             
  124.                mr = M - ( mu = (int)( ( (unsigned int)(M) >> HPL_LASWP10N_LOG2_DEPTH )
  125.                                         << HPL_LASWP10N_LOG2_DEPTH ) );
  126.             
  127.  + 1------<    for( j = 0; j < N; j++ )
  128.    1           {
  129.    1              if( j != ( jp = IPIV[j] ) )
  130.    1              {
  131.    1                 a0 = A + j * LDA; a1 = A + jp * LDA;
  132.    1        
  133.  + 1 r6---<          for( i = 0; i < mu; i += incA, a0 += incA, a1 += incA )
  134.    1 r6              {
  135.    1 r6                 r = *a0;    *a0    = *a1;    *a1    = r;
  136.    1 r6     #if ( HPL_LASWP10N_DEPTH >  1 )
  137.    1 r6                 r = a0[ 1]; a0[ 1] = a1[ 1]; a1[ 1] = r;
  138.    1 r6     #endif
  139.    1 r6     #if ( HPL_LASWP10N_DEPTH >  2 )
  140.    1 r6                 r = a0[ 2]; a0[ 2] = a1[ 2]; a1[ 2] = r;
  141.    1 r6                 r = a0[ 3]; a0[ 3] = a1[ 3]; a1[ 3] = r;
  142.    1 r6     #endif
  143.    1 r6     #if ( HPL_LASWP10N_DEPTH >  4 )
  144.    1 r6                 r = a0[ 4]; a0[ 4] = a1[ 4]; a1[ 4] = r;
  145.    1 r6                 r = a0[ 5]; a0[ 5] = a1[ 5]; a1[ 5] = r;
  146.    1 r6                 r = a0[ 6]; a0[ 6] = a1[ 6]; a1[ 6] = r;
  147.    1 r6                 r = a0[ 7]; a0[ 7] = a1[ 7]; a1[ 7] = r;
  148.    1 r6     #endif
  149.    1 r6     #if ( HPL_LASWP10N_DEPTH >  8 )
  150.    1 r6                 r = a0[ 8]; a0[ 8] = a1[ 8]; a1[ 8] = r;
  151.    1 r6                 r = a0[ 9]; a0[ 9] = a1[ 9]; a1[ 9] = r;
  152.    1 r6                 r = a0[10]; a0[10] = a1[10]; a1[10] = r;
  153.    1 r6                 r = a0[11]; a0[11] = a1[11]; a1[11] = r;
  154.    1 r6                 r = a0[12]; a0[12] = a1[12]; a1[12] = r;
  155.    1 r6                 r = a0[13]; a0[13] = a1[13]; a1[13] = r;
  156.    1 r6                 r = a0[14]; a0[14] = a1[14]; a1[14] = r;
  157.    1 r6                 r = a0[15]; a0[15] = a1[15]; a1[15] = r;
  158.    1 r6     #endif
  159.    1 r6     #if ( HPL_LASWP10N_DEPTH > 16 )
  160.    1 r6                 r = a0[16]; a0[16] = a1[16]; a1[16] = r;
  161.    1 r6                 r = a0[17]; a0[17] = a1[17]; a1[17] = r;
  162.    1 r6                 r = a0[18]; a0[18] = a1[18]; a1[18] = r;
  163.    1 r6                 r = a0[19]; a0[19] = a1[19]; a1[19] = r;
  164.    1 r6                 r = a0[20]; a0[20] = a1[20]; a1[20] = r;
  165.    1 r6                 r = a0[21]; a0[21] = a1[21]; a1[21] = r;
  166.    1 r6                 r = a0[22]; a0[22] = a1[22]; a1[22] = r;
  167.    1 r6                 r = a0[23]; a0[23] = a1[23]; a1[23] = r;
  168.    1 r6                 r = a0[24]; a0[24] = a1[24]; a1[24] = r;
  169.    1 r6                 r = a0[25]; a0[25] = a1[25]; a1[25] = r;
  170.    1 r6                 r = a0[26]; a0[26] = a1[26]; a1[26] = r;
  171.    1 r6                 r = a0[27]; a0[27] = a1[27]; a1[27] = r;
  172.    1 r6                 r = a0[28]; a0[28] = a1[28]; a1[28] = r;
  173.    1 r6                 r = a0[29]; a0[29] = a1[29]; a1[29] = r;
  174.    1 r6                 r = a0[30]; a0[30] = a1[30]; a1[30] = r;
  175.    1 r6                 r = a0[31]; a0[31] = a1[31]; a1[31] = r;
  176.    1 r6     #endif
  177.    1 r6--->          }
  178.    1        
  179.    1 Vr2--<          for( i = 0; i < mr; i++ )
  180.    1 Vr2-->          { r = a0[i]; a0[i] = a1[i]; a1[i] = r; }
  181.    1              }
  182.    1------>    }
  183.             /*
  184.              * End of HPL_dlaswp10N
  185.              */
  186.             }

CC-6294 CC: VECTOR File = HPL_dlaswp10N.c, Line = 127 
  A loop was not vectorized because a better candidate was found at line 133.

CC-6332 CC: VECTOR File = HPL_dlaswp10N.c, Line = 133 
  A loop was not vectorized because it does not map well onto the target architecture.

CC-6005 CC: SCALAR File = HPL_dlaswp10N.c, Line = 133 
  A loop was unrolled 6 times.

CC-6005 CC: SCALAR File = HPL_dlaswp10N.c, Line = 179 
  A loop was unrolled 2 times.

CC-6204 CC: VECTOR File = HPL_dlaswp10N.c, Line = 179 
  A loop was vectorized.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
