%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../testing/ptimer/HPL_ptimer_cputime.c
Compiled : 2016-03-19  13:20:05
Compiler : Version 8.4.5
Ftnlx    : Version 8413 (libcif 84006)
Target   : x86-64
Command  : driver.cc -h cpu=haswell -h static -D __CRAYXC -D __CRAY_HASWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -h network=aries
           -o ../../../testing/ptimer/HPL_ptimer_cputime.o
           -c ../../../testing/ptimer/HPL_ptimer_cputime.c -I ../../../include
           -I ../../../include/CrayX1 -D Add_ -D StringSunStyle
           -D F77_INTEGER=int -O 2 -h list=m -D LONG_IS_64BITS -h restrict=a
           -W l,--rpath=/opt/cray/cce/8.4.5/craylibs/x86-64
           -ibase-compiler /opt/cray/cce/8.4.5/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.4.5/craylibs/x86-64/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include-fixed
           -isystem /usr/include
           -I /opt/cray/mpt/7.3.2/gni/mpich-cray/8.3/include
           -I /opt/cray/libsci/16.03.1/CRAY/8.3/x86_64/include
           -I /opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I /opt/cray/pmi/5.0.10-1.0000.11050.0.0.ari/include
           -I /opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I /opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I /opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I /opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I /opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/../include
           -I /opt/cray/cce/8.4.5/craylibs/x86-64/pkgconfig/..//include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I /opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I /opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I /opt/cray-hss-devel/7.2.0/include

clx report
------------
Source   : /lustre/tetyda/home/lgorski/okeanos_scripts/randomaccess/hpcc-1.4.3_src_mod_ra/hpl/lib/arch/build/../../../testing/ptimer/HPL_ptimer_cputime.c
Date     : 03/19/2016  13:20:06


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.     /* 
    2.      * -- High Performance Computing Linpack Benchmark (HPL)                
    3.      *    HPL - 2.0 - September 10, 2008                          
    4.      *    Antoine P. Petitet                                                
    5.      *    University of Tennessee, Knoxville                                
    6.      *    Innovative Computing Laboratory                                 
    7.      *    (C) Copyright 2000-2008 All Rights Reserved                       
    8.      *                                                                      
    9.      * -- Copyright notice and Licensing terms:                             
   10.      *                                                                      
   11.      * Redistribution  and  use in  source and binary forms, with or without
   12.      * modification, are  permitted provided  that the following  conditions
   13.      * are met:                                                             
   14.      *                                                                      
   15.      * 1. Redistributions  of  source  code  must retain the above copyright
   16.      * notice, this list of conditions and the following disclaimer.        
   17.      *                                                                      
   18.      * 2. Redistributions in binary form must reproduce  the above copyright
   19.      * notice, this list of conditions,  and the following disclaimer in the
   20.      * documentation and/or other materials provided with the distribution. 
   21.      *                                                                      
   22.      * 3. All  advertising  materials  mentioning  features  or  use of this
   23.      * software must display the following acknowledgement:                 
   24.      * This  product  includes  software  developed  at  the  University  of
   25.      * Tennessee, Knoxville, Innovative Computing Laboratory.             
   26.      *                                                                      
   27.      * 4. The name of the  University,  the name of the  Laboratory,  or the
   28.      * names  of  its  contributors  may  not  be used to endorse or promote
   29.      * products  derived   from   this  software  without  specific  written
   30.      * permission.                                                          
   31.      *                                                                      
   32.      * -- Disclaimer:                                                       
   33.      *                                                                      
   34.      * THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   35.      * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
   36.      * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   37.      * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
   38.      * OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
   39.      * SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
   40.      * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   41.      * DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
   42.      * THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
   43.      * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   44.      * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
   45.      * ---------------------------------------------------------------------
   46.      */ 
   47.     /*
   48.      * Include files
   49.      */
   50.     #include "hpl.h"
   51.     
   52.     /* 
   53.      * Purpose
   54.      * =======
   55.      *
   56.      * HPL_ptimer_cputime returns the cpu time. If HPL_USE_CLOCK is defined,
   57.      * the  clock() function is used to return an approximation of processor
   58.      * time used by the program.  The value returned is the CPU time used so
   59.      * far as a clock_t;  to get the number of seconds used,  the result  is
   60.      * divided by  CLOCKS_PER_SEC.  This function is part of the  ANSI/ISO C
   61.      * standard library.  If  HPL_USE_TIMES is defined, the times() function
   62.      * is used instead.  This  function  returns  the current process times.
   63.      * times() returns the number of clock ticks that have elapsed since the
   64.      * system has been up.  Otherwise and by default,  the  standard library
   65.      * function getrusage() is used.
   66.      *
   67.      * ---------------------------------------------------------------------
   68.      */ 
   69.     
   70.     #if   defined( HPL_USE_CLOCK )
   71.      
   72.     #include <time.h>
   73.     
   74.     #ifdef HPL_STDC_HEADERS
   75.     double HPL_ptimer_cputime( void )
   76.     #else
   77.     double HPL_ptimer_cputime()
   78.     #endif
   79.     {
   80.        static double              cps = CLOCKS_PER_SEC;
   81.        double                     d;
   82.        clock_t                    t1;
   83.        static clock_t             t0 = 0;
   84.      
   85.        if( t0 == 0 ) t0 = clock();
   86.        t1 = clock() - t0;
   87.        d = (double)(t1) / cps;
   88.        return( d );
   89.     }
   90.     
   91.     #elif defined( HPL_USE_TIMES )
   92.      
   93.     #include <sys/times.h>
   94.     #include <unistd.h>
   95.     
   96.     #ifdef HPL_STDC_HEADERS
   97.     double HPL_ptimer_cputime( void )
   98.     #else
   99.     double HPL_ptimer_cputime()
  100.     #endif
  101.     {
  102.        clock_t                    t1;
  103.        struct tms                 ts;
  104.        static double              ClockTick = HPL_rzero;
  105.      
  106.        if( ClockTick == HPL_rzero ) ClockTick = (double)(sysconf(_SC_CLK_TCK));
  107.        (void) times( &ts );
  108.        return( (double)(ts.tms_utime) / ClockTick );
  109.     }
  110.     
  111.     #elif defined( HPL_USE_GETPROCESSTIMES )
  112.     
  113.     #include <time.h>
  114.     #include <windows.h>
  115.     
  116.     #ifdef HPL_STDC_HEADERS
  117.     double HPL_ptimer_cputime( void )
  118.     #else
  119.     double HPL_ptimer_cputime()
  120.     #endif
  121.     {
  122.       FILETIME creation, exit, kernel, user;
  123.       GetProcessTimes( GetCurrentProcess(), &creation, &exit, &kernel, &user );
  124.       return (*(LONGLONG*)&kernel+*(LONGLONG*)&user)*1e-7;
  125.     }
  126.     
  127.     /* #elif defined( HPL_USE_GETRUSAGE ) */
  128.     #else
  129.      
  130.     #include <sys/time.h>
  131.     #include <sys/resource.h>
  132.     
  133.     #ifdef HPL_STDC_HEADERS
  134.     double HPL_ptimer_cputime( void )
  135.     #else
  136.     double HPL_ptimer_cputime()
  137.     #endif
  138.     {
  139.        struct rusage              ruse;
  140.     
  141.  +     (void) getrusage( RUSAGE_SELF, &ruse );
  142.        return( (double)( ruse.ru_utime.tv_sec  ) +
  143.                ( (double)( ruse.ru_utime.tv_usec ) / 1000000.0 ) );
  144.     }
  145.     
  146.     /* 
  147.     #else
  148.     
  149.     #ifdef HPL_STDC_HEADERS
  150.     double HPL_ptimer_cputime( void )
  151.     #else
  152.     double HPL_ptimer_cputime()
  153.     #endif
  154.     {
  155.        return( HPL_PTIMER_ERROR );
  156.     }
  157.     */
  158.     
  159.     #endif
  160.     /*
  161.      * End of HPL_ptimer_cputime
  162.      */

CC-3021 CC: IPA File = HPL_ptimer_cputime.c, Line = 141 
  "getrusage" (called from "HPL_ptimer_cputime") was not inlined because the compiler was unable to locate the routine.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
